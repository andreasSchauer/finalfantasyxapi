// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: battle_mechanics.sql

package database

import (
	"context"
	"database/sql"
)

const createAffinity = `-- name: CreateAffinity :exec
INSERT INTO affinities (data_hash, name, damage_factor)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAffinityParams struct {
	DataHash     string
	Name         string
	DamageFactor sql.NullFloat64
}

func (q *Queries) CreateAffinity(ctx context.Context, arg CreateAffinityParams) error {
	_, err := q.db.ExecContext(ctx, createAffinity, arg.DataHash, arg.Name, arg.DamageFactor)
	return err
}

const createAgilitySubtier = `-- name: CreateAgilitySubtier :exec
INSERT INTO agility_subtiers (data_hash, agility_tier_id, subtier_min_agility, subtier_max_agility, character_min_icv)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAgilitySubtierParams struct {
	DataHash          string
	AgilityTierID     int32
	SubtierMinAgility interface{}
	SubtierMaxAgility interface{}
	CharacterMinIcv   sql.NullInt32
}

func (q *Queries) CreateAgilitySubtier(ctx context.Context, arg CreateAgilitySubtierParams) error {
	_, err := q.db.ExecContext(ctx, createAgilitySubtier,
		arg.DataHash,
		arg.AgilityTierID,
		arg.SubtierMinAgility,
		arg.SubtierMaxAgility,
		arg.CharacterMinIcv,
	)
	return err
}

const createAgilityTier = `-- name: CreateAgilityTier :one
INSERT INTO agility_tiers (data_hash, min_agility, max_agility, tick_speed, monster_min_icv, monster_max_icv, character_max_icv)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (data_hash) DO UPDATE SET data_hash = agility_tiers.data_hash
RETURNING id, data_hash, min_agility, max_agility, tick_speed, monster_min_icv, monster_max_icv, character_max_icv
`

type CreateAgilityTierParams struct {
	DataHash        string
	MinAgility      interface{}
	MaxAgility      interface{}
	TickSpeed       int32
	MonsterMinIcv   sql.NullInt32
	MonsterMaxIcv   sql.NullInt32
	CharacterMaxIcv sql.NullInt32
}

func (q *Queries) CreateAgilityTier(ctx context.Context, arg CreateAgilityTierParams) (AgilityTier, error) {
	row := q.db.QueryRowContext(ctx, createAgilityTier,
		arg.DataHash,
		arg.MinAgility,
		arg.MaxAgility,
		arg.TickSpeed,
		arg.MonsterMinIcv,
		arg.MonsterMaxIcv,
		arg.CharacterMaxIcv,
	)
	var i AgilityTier
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.MinAgility,
		&i.MaxAgility,
		&i.TickSpeed,
		&i.MonsterMinIcv,
		&i.MonsterMaxIcv,
		&i.CharacterMaxIcv,
	)
	return i, err
}

const createBaseStat = `-- name: CreateBaseStat :one
INSERT INTO base_stats (data_hash, stat_id, value)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = base_stats.data_hash
RETURNING id, data_hash, stat_id, value
`

type CreateBaseStatParams struct {
	DataHash string
	StatID   int32
	Value    int32
}

func (q *Queries) CreateBaseStat(ctx context.Context, arg CreateBaseStatParams) (BaseStat, error) {
	row := q.db.QueryRowContext(ctx, createBaseStat, arg.DataHash, arg.StatID, arg.Value)
	var i BaseStat
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.StatID,
		&i.Value,
	)
	return i, err
}

const createElement = `-- name: CreateElement :one
INSERT INTO elements (data_hash, name)
VALUES ($1, $2)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = elements.data_hash
RETURNING id, data_hash, name, opposite_element_id
`

type CreateElementParams struct {
	DataHash string
	Name     string
}

func (q *Queries) CreateElement(ctx context.Context, arg CreateElementParams) (Element, error) {
	row := q.db.QueryRowContext(ctx, createElement, arg.DataHash, arg.Name)
	var i Element
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.OppositeElementID,
	)
	return i, err
}

const createModifier = `-- name: CreateModifier :one
INSERT INTO modifiers (data_hash, name, effect, type, default_value)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = modifiers.data_hash
RETURNING id, data_hash, name, effect, type, default_value
`

type CreateModifierParams struct {
	DataHash     string
	Name         string
	Effect       string
	Type         ModifierType
	DefaultValue sql.NullFloat64
}

func (q *Queries) CreateModifier(ctx context.Context, arg CreateModifierParams) (Modifier, error) {
	row := q.db.QueryRowContext(ctx, createModifier,
		arg.DataHash,
		arg.Name,
		arg.Effect,
		arg.Type,
		arg.DefaultValue,
	)
	var i Modifier
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Effect,
		&i.Type,
		&i.DefaultValue,
	)
	return i, err
}

const createModifierChange = `-- name: CreateModifierChange :one
INSERT INTO modifier_changes (data_hash, modifier_id, calculation_type, value)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = modifier_changes.data_hash
RETURNING id, data_hash, modifier_id, calculation_type, value
`

type CreateModifierChangeParams struct {
	DataHash        string
	ModifierID      int32
	CalculationType CalculationType
	Value           float32
}

func (q *Queries) CreateModifierChange(ctx context.Context, arg CreateModifierChangeParams) (ModifierChange, error) {
	row := q.db.QueryRowContext(ctx, createModifierChange,
		arg.DataHash,
		arg.ModifierID,
		arg.CalculationType,
		arg.Value,
	)
	var i ModifierChange
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.ModifierID,
		&i.CalculationType,
		&i.Value,
	)
	return i, err
}

const createODModeAction = `-- name: CreateODModeAction :one
INSERT INTO od_mode_actions (data_hash, user_id, amount)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = od_mode_actions.data_hash
RETURNING id, data_hash, user_id, amount
`

type CreateODModeActionParams struct {
	DataHash string
	UserID   int32
	Amount   int32
}

func (q *Queries) CreateODModeAction(ctx context.Context, arg CreateODModeActionParams) (OdModeAction, error) {
	row := q.db.QueryRowContext(ctx, createODModeAction, arg.DataHash, arg.UserID, arg.Amount)
	var i OdModeAction
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.UserID,
		&i.Amount,
	)
	return i, err
}

const createODModeActionJunction = `-- name: CreateODModeActionJunction :exec
INSERT INTO j_od_mode_action (data_hash, overdrive_mode_id, action_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateODModeActionJunctionParams struct {
	DataHash        string
	OverdriveModeID int32
	ActionID        int32
}

func (q *Queries) CreateODModeActionJunction(ctx context.Context, arg CreateODModeActionJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createODModeActionJunction, arg.DataHash, arg.OverdriveModeID, arg.ActionID)
	return err
}

const createOverdriveMode = `-- name: CreateOverdriveMode :one
INSERT INTO overdrive_modes (data_hash, name, description, effect, type, fill_rate)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = overdrive_modes.data_hash
RETURNING id, data_hash, name, description, effect, type, fill_rate
`

type CreateOverdriveModeParams struct {
	DataHash    string
	Name        string
	Description string
	Effect      string
	Type        OverdriveType
	FillRate    interface{}
}

func (q *Queries) CreateOverdriveMode(ctx context.Context, arg CreateOverdriveModeParams) (OverdriveMode, error) {
	row := q.db.QueryRowContext(ctx, createOverdriveMode,
		arg.DataHash,
		arg.Name,
		arg.Description,
		arg.Effect,
		arg.Type,
		arg.FillRate,
	)
	var i OverdriveMode
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Description,
		&i.Effect,
		&i.Type,
		&i.FillRate,
	)
	return i, err
}

const createProperty = `-- name: CreateProperty :one
INSERT INTO properties (data_hash, name, effect, nullify_armored)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = properties.data_hash
RETURNING id, data_hash, name, effect, nullify_armored
`

type CreatePropertyParams struct {
	DataHash       string
	Name           string
	Effect         string
	NullifyArmored NullNullifyArmored
}

func (q *Queries) CreateProperty(ctx context.Context, arg CreatePropertyParams) (Property, error) {
	row := q.db.QueryRowContext(ctx, createProperty,
		arg.DataHash,
		arg.Name,
		arg.Effect,
		arg.NullifyArmored,
	)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Effect,
		&i.NullifyArmored,
	)
	return i, err
}

const createPropertyModifierChangeJunction = `-- name: CreatePropertyModifierChangeJunction :exec
INSERT INTO j_property_modifier_change (data_hash, property_id, modifier_change_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreatePropertyModifierChangeJunctionParams struct {
	DataHash         string
	PropertyID       int32
	ModifierChangeID int32
}

func (q *Queries) CreatePropertyModifierChangeJunction(ctx context.Context, arg CreatePropertyModifierChangeJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createPropertyModifierChangeJunction, arg.DataHash, arg.PropertyID, arg.ModifierChangeID)
	return err
}

const createPropertyStatChangeJunction = `-- name: CreatePropertyStatChangeJunction :exec
INSERT INTO j_property_stat_change (data_hash, property_id, stat_change_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreatePropertyStatChangeJunctionParams struct {
	DataHash     string
	PropertyID   int32
	StatChangeID int32
}

func (q *Queries) CreatePropertyStatChangeJunction(ctx context.Context, arg CreatePropertyStatChangeJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createPropertyStatChangeJunction, arg.DataHash, arg.PropertyID, arg.StatChangeID)
	return err
}

const createPropertyStatJunction = `-- name: CreatePropertyStatJunction :exec
INSERT INTO j_property_stat (data_hash, property_id, stat_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreatePropertyStatJunctionParams struct {
	DataHash   string
	PropertyID int32
	StatID     int32
}

func (q *Queries) CreatePropertyStatJunction(ctx context.Context, arg CreatePropertyStatJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createPropertyStatJunction, arg.DataHash, arg.PropertyID, arg.StatID)
	return err
}

const createPropertyStatusConditionJunction = `-- name: CreatePropertyStatusConditionJunction :exec
INSERT INTO j_property_status_condition (data_hash, property_id, status_condition_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreatePropertyStatusConditionJunctionParams struct {
	DataHash          string
	PropertyID        int32
	StatusConditionID int32
}

func (q *Queries) CreatePropertyStatusConditionJunction(ctx context.Context, arg CreatePropertyStatusConditionJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createPropertyStatusConditionJunction, arg.DataHash, arg.PropertyID, arg.StatusConditionID)
	return err
}

const createStat = `-- name: CreateStat :one
INSERT INTO stats (data_hash, name, effect, min_val, max_val, max_val_2)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = stats.data_hash
RETURNING id, data_hash, name, effect, min_val, max_val, max_val_2, sphere_id
`

type CreateStatParams struct {
	DataHash string
	Name     string
	Effect   string
	MinVal   int32
	MaxVal   int32
	MaxVal2  sql.NullInt32
}

func (q *Queries) CreateStat(ctx context.Context, arg CreateStatParams) (Stat, error) {
	row := q.db.QueryRowContext(ctx, createStat,
		arg.DataHash,
		arg.Name,
		arg.Effect,
		arg.MinVal,
		arg.MaxVal,
		arg.MaxVal2,
	)
	var i Stat
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Effect,
		&i.MinVal,
		&i.MaxVal,
		&i.MaxVal2,
		&i.SphereID,
	)
	return i, err
}

const createStatChange = `-- name: CreateStatChange :one
INSERT INTO stat_changes (data_hash, stat_id, calculation_type, value)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = stat_changes.data_hash
RETURNING id, data_hash, stat_id, calculation_type, value
`

type CreateStatChangeParams struct {
	DataHash        string
	StatID          int32
	CalculationType CalculationType
	Value           float32
}

func (q *Queries) CreateStatChange(ctx context.Context, arg CreateStatChangeParams) (StatChange, error) {
	row := q.db.QueryRowContext(ctx, createStatChange,
		arg.DataHash,
		arg.StatID,
		arg.CalculationType,
		arg.Value,
	)
	var i StatChange
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.StatID,
		&i.CalculationType,
		&i.Value,
	)
	return i, err
}

const createStatusCondition = `-- name: CreateStatusCondition :one
INSERT INTO status_conditions (data_hash, name, effect, nullify_armored)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = status_conditions.data_hash
RETURNING id, data_hash, name, effect, nullify_armored
`

type CreateStatusConditionParams struct {
	DataHash       string
	Name           string
	Effect         string
	NullifyArmored NullNullifyArmored
}

func (q *Queries) CreateStatusCondition(ctx context.Context, arg CreateStatusConditionParams) (StatusCondition, error) {
	row := q.db.QueryRowContext(ctx, createStatusCondition,
		arg.DataHash,
		arg.Name,
		arg.Effect,
		arg.NullifyArmored,
	)
	var i StatusCondition
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Effect,
		&i.NullifyArmored,
	)
	return i, err
}

const createStatusConditionModifierChangeJunction = `-- name: CreateStatusConditionModifierChangeJunction :exec
INSERT INTO j_status_condition_modifier_change (data_hash, status_condition_id, modifier_change_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateStatusConditionModifierChangeJunctionParams struct {
	DataHash          string
	StatusConditionID int32
	ModifierChangeID  int32
}

func (q *Queries) CreateStatusConditionModifierChangeJunction(ctx context.Context, arg CreateStatusConditionModifierChangeJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createStatusConditionModifierChangeJunction, arg.DataHash, arg.StatusConditionID, arg.ModifierChangeID)
	return err
}

const createStatusConditionSelfJunction = `-- name: CreateStatusConditionSelfJunction :exec
INSERT INTO j_status_condition_self (data_hash, parent_condition_id, child_condition_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateStatusConditionSelfJunctionParams struct {
	DataHash          string
	ParentConditionID int32
	ChildConditionID  int32
}

func (q *Queries) CreateStatusConditionSelfJunction(ctx context.Context, arg CreateStatusConditionSelfJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createStatusConditionSelfJunction, arg.DataHash, arg.ParentConditionID, arg.ChildConditionID)
	return err
}

const createStatusConditionStatChangeJunction = `-- name: CreateStatusConditionStatChangeJunction :exec
INSERT INTO j_status_condition_stat_change (data_hash, status_condition_id, stat_change_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateStatusConditionStatChangeJunctionParams struct {
	DataHash          string
	StatusConditionID int32
	StatChangeID      int32
}

func (q *Queries) CreateStatusConditionStatChangeJunction(ctx context.Context, arg CreateStatusConditionStatChangeJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createStatusConditionStatChangeJunction, arg.DataHash, arg.StatusConditionID, arg.StatChangeID)
	return err
}

const createStatusConditionStatJunction = `-- name: CreateStatusConditionStatJunction :exec
INSERT INTO j_status_condition_stat (data_hash, status_condition_id, stat_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateStatusConditionStatJunctionParams struct {
	DataHash          string
	StatusConditionID int32
	StatID            int32
}

func (q *Queries) CreateStatusConditionStatJunction(ctx context.Context, arg CreateStatusConditionStatJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createStatusConditionStatJunction, arg.DataHash, arg.StatusConditionID, arg.StatID)
	return err
}

const updateElement = `-- name: UpdateElement :exec
UPDATE elements
SET data_hash = $1,
    name = $2,
    opposite_element_id = $3
WHERE id = $4
`

type UpdateElementParams struct {
	DataHash          string
	Name              string
	OppositeElementID sql.NullInt32
	ID                int32
}

func (q *Queries) UpdateElement(ctx context.Context, arg UpdateElementParams) error {
	_, err := q.db.ExecContext(ctx, updateElement,
		arg.DataHash,
		arg.Name,
		arg.OppositeElementID,
		arg.ID,
	)
	return err
}

const updateStat = `-- name: UpdateStat :exec
UPDATE stats
SET data_hash = $1,
    name = $2,
    effect = $3,
    min_val = $4,
    max_val = $5,
    max_val_2 = $6,
    sphere_id = $7
WHERE id = $8
`

type UpdateStatParams struct {
	DataHash string
	Name     string
	Effect   string
	MinVal   int32
	MaxVal   int32
	MaxVal2  sql.NullInt32
	SphereID sql.NullInt32
	ID       int32
}

func (q *Queries) UpdateStat(ctx context.Context, arg UpdateStatParams) error {
	_, err := q.db.ExecContext(ctx, updateStat,
		arg.DataHash,
		arg.Name,
		arg.Effect,
		arg.MinVal,
		arg.MaxVal,
		arg.MaxVal2,
		arg.SphereID,
		arg.ID,
	)
	return err
}
