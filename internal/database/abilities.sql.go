// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: abilities.sql

package database

import (
	"context"
	"database/sql"
)

const createAbility = `-- name: CreateAbility :one
INSERT INTO abilities (data_hash, name, version, specification, type)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (data_hash) DO UPDATE SET data_hash = abilities.data_hash
RETURNING id, data_hash, name, version, specification, type
`

type CreateAbilityParams struct {
	DataHash      string
	Name          string
	Version       sql.NullInt32
	Specification sql.NullString
	Type          AbilityType
}

func (q *Queries) CreateAbility(ctx context.Context, arg CreateAbilityParams) (Ability, error) {
	row := q.db.QueryRowContext(ctx, createAbility,
		arg.DataHash,
		arg.Name,
		arg.Version,
		arg.Specification,
		arg.Type,
	)
	var i Ability
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Version,
		&i.Specification,
		&i.Type,
	)
	return i, err
}

const createEnemyAbility = `-- name: CreateEnemyAbility :exec
INSERT INTO enemy_abilities (data_hash, ability_id, effect, rank, appears_in_help_bar, can_copycat)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateEnemyAbilityParams struct {
	DataHash         string
	AbilityID        int32
	Effect           sql.NullString
	Rank             int32
	AppearsInHelpBar bool
	CanCopycat       bool
}

func (q *Queries) CreateEnemyAbility(ctx context.Context, arg CreateEnemyAbilityParams) error {
	_, err := q.db.ExecContext(ctx, createEnemyAbility,
		arg.DataHash,
		arg.AbilityID,
		arg.Effect,
		arg.Rank,
		arg.AppearsInHelpBar,
		arg.CanCopycat,
	)
	return err
}

const createOverdriveAbility = `-- name: CreateOverdriveAbility :exec
INSERT INTO overdrive_abilities (data_hash, ability_id)
VALUES ($1, $2)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateOverdriveAbilityParams struct {
	DataHash  string
	AbilityID int32
}

func (q *Queries) CreateOverdriveAbility(ctx context.Context, arg CreateOverdriveAbilityParams) error {
	_, err := q.db.ExecContext(ctx, createOverdriveAbility, arg.DataHash, arg.AbilityID)
	return err
}

const createPlayerAbility = `-- name: CreatePlayerAbility :exec
INSERT INTO player_abilities (data_hash, ability_id, description, effect, submenu, can_use_outside_battle, mp_cost, rank, appears_in_help_bar, can_copycat)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
ON CONFLICT(data_hash) DO NOTHING
`

type CreatePlayerAbilityParams struct {
	DataHash            string
	AbilityID           int32
	Description         sql.NullString
	Effect              string
	Submenu             NullSubmenuType
	CanUseOutsideBattle bool
	MpCost              sql.NullInt32
	Rank                sql.NullInt32
	AppearsInHelpBar    bool
	CanCopycat          bool
}

func (q *Queries) CreatePlayerAbility(ctx context.Context, arg CreatePlayerAbilityParams) error {
	_, err := q.db.ExecContext(ctx, createPlayerAbility,
		arg.DataHash,
		arg.AbilityID,
		arg.Description,
		arg.Effect,
		arg.Submenu,
		arg.CanUseOutsideBattle,
		arg.MpCost,
		arg.Rank,
		arg.AppearsInHelpBar,
		arg.CanCopycat,
	)
	return err
}

const createTriggerCommand = `-- name: CreateTriggerCommand :exec
INSERT INTO trigger_commands (data_hash, ability_id, description, effect, rank, appears_in_help_bar, can_copycat)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateTriggerCommandParams struct {
	DataHash         string
	AbilityID        int32
	Description      string
	Effect           string
	Rank             int32
	AppearsInHelpBar bool
	CanCopycat       bool
}

func (q *Queries) CreateTriggerCommand(ctx context.Context, arg CreateTriggerCommandParams) error {
	_, err := q.db.ExecContext(ctx, createTriggerCommand,
		arg.DataHash,
		arg.AbilityID,
		arg.Description,
		arg.Effect,
		arg.Rank,
		arg.AppearsInHelpBar,
		arg.CanCopycat,
	)
	return err
}
