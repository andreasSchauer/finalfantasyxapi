// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: commands_menus.sql

package database

import (
	"context"
	"database/sql"
)

const createAeonCommand = `-- name: CreateAeonCommand :one
INSERT INTO aeon_commands (data_hash, name, description, effect, topmenu, cursor)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = aeon_commands.data_hash
RETURNING id, data_hash, name, description, effect, topmenu, cursor, submenu_id
`

type CreateAeonCommandParams struct {
	DataHash    string
	Name        string
	Description string
	Effect      string
	Topmenu     TopmenuType
	Cursor      NullTargetType
}

func (q *Queries) CreateAeonCommand(ctx context.Context, arg CreateAeonCommandParams) (AeonCommand, error) {
	row := q.db.QueryRowContext(ctx, createAeonCommand,
		arg.DataHash,
		arg.Name,
		arg.Description,
		arg.Effect,
		arg.Topmenu,
		arg.Cursor,
	)
	var i AeonCommand
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Description,
		&i.Effect,
		&i.Topmenu,
		&i.Cursor,
		&i.SubmenuID,
	)
	return i, err
}

const createAeonCommandAbilityJunction = `-- name: CreateAeonCommandAbilityJunction :exec
INSERT INTO j_aeon_command_ability (data_hash, aeon_command_id, ability_id, character_class_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAeonCommandAbilityJunctionParams struct {
	DataHash         string
	AeonCommandID    int32
	AbilityID        int32
	CharacterClassID int32
}

func (q *Queries) CreateAeonCommandAbilityJunction(ctx context.Context, arg CreateAeonCommandAbilityJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createAeonCommandAbilityJunction,
		arg.DataHash,
		arg.AeonCommandID,
		arg.AbilityID,
		arg.CharacterClassID,
	)
	return err
}

const createOverdriveCommand = `-- name: CreateOverdriveCommand :one
INSERT INTO overdrive_commands (data_hash, name, description, rank, topmenu)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (data_hash) DO UPDATE SET data_hash = overdrive_commands.data_hash
RETURNING id, data_hash, name, description, rank, topmenu, character_class_id, submenu_id
`

type CreateOverdriveCommandParams struct {
	DataHash    string
	Name        string
	Description string
	Rank        int32
	Topmenu     TopmenuType
}

func (q *Queries) CreateOverdriveCommand(ctx context.Context, arg CreateOverdriveCommandParams) (OverdriveCommand, error) {
	row := q.db.QueryRowContext(ctx, createOverdriveCommand,
		arg.DataHash,
		arg.Name,
		arg.Description,
		arg.Rank,
		arg.Topmenu,
	)
	var i OverdriveCommand
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Description,
		&i.Rank,
		&i.Topmenu,
		&i.CharacterClassID,
		&i.SubmenuID,
	)
	return i, err
}

const createSubmenu = `-- name: CreateSubmenu :one
INSERT INTO submenus (data_hash, name, description, effect, topmenu)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = submenus.data_hash
RETURNING id, data_hash, name, description, effect, topmenu
`

type CreateSubmenuParams struct {
	DataHash    string
	Name        string
	Description string
	Effect      string
	Topmenu     NullTopmenuType
}

func (q *Queries) CreateSubmenu(ctx context.Context, arg CreateSubmenuParams) (Submenu, error) {
	row := q.db.QueryRowContext(ctx, createSubmenu,
		arg.DataHash,
		arg.Name,
		arg.Description,
		arg.Effect,
		arg.Topmenu,
	)
	var i Submenu
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Description,
		&i.Effect,
		&i.Topmenu,
	)
	return i, err
}

const createSubmenuCharacterClassJunction = `-- name: CreateSubmenuCharacterClassJunction :exec
INSERT INTO j_submenu_character_class (data_hash, submenu_id, character_class_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateSubmenuCharacterClassJunctionParams struct {
	DataHash         string
	SubmenuID        int32
	CharacterClassID int32
}

func (q *Queries) CreateSubmenuCharacterClassJunction(ctx context.Context, arg CreateSubmenuCharacterClassJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createSubmenuCharacterClassJunction, arg.DataHash, arg.SubmenuID, arg.CharacterClassID)
	return err
}

const updateAeonCommand = `-- name: UpdateAeonCommand :exec
UPDATE aeon_commands
SET data_hash = $1,
    submenu_id = $2
WHERE id = $3
`

type UpdateAeonCommandParams struct {
	DataHash  string
	SubmenuID sql.NullInt32
	ID        int32
}

func (q *Queries) UpdateAeonCommand(ctx context.Context, arg UpdateAeonCommandParams) error {
	_, err := q.db.ExecContext(ctx, updateAeonCommand, arg.DataHash, arg.SubmenuID, arg.ID)
	return err
}

const updateOverdriveCommand = `-- name: UpdateOverdriveCommand :exec
UPDATE overdrive_commands
SET data_hash = $1,
    character_class_id = $2,
    submenu_id = $3
WHERE id = $4
`

type UpdateOverdriveCommandParams struct {
	DataHash         string
	CharacterClassID sql.NullInt32
	SubmenuID        sql.NullInt32
	ID               int32
}

func (q *Queries) UpdateOverdriveCommand(ctx context.Context, arg UpdateOverdriveCommandParams) error {
	_, err := q.db.ExecContext(ctx, updateOverdriveCommand,
		arg.DataHash,
		arg.CharacterClassID,
		arg.SubmenuID,
		arg.ID,
	)
	return err
}
