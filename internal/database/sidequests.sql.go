// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sidequests.sql

package database

import (
	"context"
)

const createBlitzballItemList = `-- name: CreateBlitzballItemList :exec
INSERT INTO blitzball_items_lists (data_hash, category, slot)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateBlitzballItemListParams struct {
	DataHash string
	Category BlitzballTournamentCategory
	Slot     BlitzballItemSlot
}

func (q *Queries) CreateBlitzballItemList(ctx context.Context, arg CreateBlitzballItemListParams) error {
	_, err := q.db.ExecContext(ctx, createBlitzballItemList, arg.DataHash, arg.Category, arg.Slot)
	return err
}

const createMonsterArenaCreation = `-- name: CreateMonsterArenaCreation :exec
INSERT INTO monster_arena_creations (data_hash, name, category, required_area, required_species, underwater_only, creations_unlocked_category, amount)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateMonsterArenaCreationParams struct {
	DataHash                  string
	Name                      string
	Category                  MaCreationCategory
	RequiredArea              NullMaCreationArea
	RequiredSpecies           NullMaCreationSpecies
	UnderwaterOnly            bool
	CreationsUnlockedCategory NullCreationsUnlockedCategory
	Amount                    int32
}

func (q *Queries) CreateMonsterArenaCreation(ctx context.Context, arg CreateMonsterArenaCreationParams) error {
	_, err := q.db.ExecContext(ctx, createMonsterArenaCreation,
		arg.DataHash,
		arg.Name,
		arg.Category,
		arg.RequiredArea,
		arg.RequiredSpecies,
		arg.UnderwaterOnly,
		arg.CreationsUnlockedCategory,
		arg.Amount,
	)
	return err
}

const createQuest = `-- name: CreateQuest :one
INSERT INTO quests (data_hash, name, type)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = quests.data_hash
RETURNING id, data_hash, name, type
`

type CreateQuestParams struct {
	DataHash string
	Name     string
	Type     QuestType
}

func (q *Queries) CreateQuest(ctx context.Context, arg CreateQuestParams) (Quest, error) {
	row := q.db.QueryRowContext(ctx, createQuest, arg.DataHash, arg.Name, arg.Type)
	var i Quest
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Type,
	)
	return i, err
}

const createSidequest = `-- name: CreateSidequest :one
INSERT INTO sidequests (data_hash, quest_id)
VALUES ($1, $2)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = sidequests.data_hash
RETURNING id, data_hash, quest_id
`

type CreateSidequestParams struct {
	DataHash string
	QuestID  int32
}

func (q *Queries) CreateSidequest(ctx context.Context, arg CreateSidequestParams) (Sidequest, error) {
	row := q.db.QueryRowContext(ctx, createSidequest, arg.DataHash, arg.QuestID)
	var i Sidequest
	err := row.Scan(&i.ID, &i.DataHash, &i.QuestID)
	return i, err
}

const createSubquest = `-- name: CreateSubquest :exec
INSERT INTO subquests (data_hash, quest_id, parent_sidequest_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateSubquestParams struct {
	DataHash          string
	QuestID           int32
	ParentSidequestID int32
}

func (q *Queries) CreateSubquest(ctx context.Context, arg CreateSubquestParams) error {
	_, err := q.db.ExecContext(ctx, createSubquest, arg.DataHash, arg.QuestID, arg.ParentSidequestID)
	return err
}
