// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: equipment.sql

package database

import (
	"context"
	"database/sql"
)

const createAutoAbility = `-- name: CreateAutoAbility :exec
INSERT INTO auto_abilities (data_hash, name, description, effect, type, category, ability_value, activation_condition, counter, gradual_recovery, on_hit_element)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAutoAbilityParams struct {
	DataHash            string
	Name                string
	Description         sql.NullString
	Effect              string
	Type                NullEquipType
	Category            AutoAbilityCategory
	AbilityValue        sql.NullInt32
	ActivationCondition NullAaActivationCondition
	Counter             NullCounterType
	GradualRecovery     NullRecoveryType
	OnHitElement        NullElementType
}

func (q *Queries) CreateAutoAbility(ctx context.Context, arg CreateAutoAbilityParams) error {
	_, err := q.db.ExecContext(ctx, createAutoAbility,
		arg.DataHash,
		arg.Name,
		arg.Description,
		arg.Effect,
		arg.Type,
		arg.Category,
		arg.AbilityValue,
		arg.ActivationCondition,
		arg.Counter,
		arg.GradualRecovery,
		arg.OnHitElement,
	)
	return err
}

const createCelestialWeapon = `-- name: CreateCelestialWeapon :one
INSERT INTO celestial_weapons (data_hash, name, key_item_base, formula)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = celestial_weapons.data_hash
RETURNING id, data_hash, name, key_item_base, formula, character_id, aeon_id
`

type CreateCelestialWeaponParams struct {
	DataHash    string
	Name        string
	KeyItemBase KeyItemBase
	Formula     CelestialFormula
}

func (q *Queries) CreateCelestialWeapon(ctx context.Context, arg CreateCelestialWeaponParams) (CelestialWeapon, error) {
	row := q.db.QueryRowContext(ctx, createCelestialWeapon,
		arg.DataHash,
		arg.Name,
		arg.KeyItemBase,
		arg.Formula,
	)
	var i CelestialWeapon
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.KeyItemBase,
		&i.Formula,
		&i.CharacterID,
		&i.AeonID,
	)
	return i, err
}

const createEquipmentAbility = `-- name: CreateEquipmentAbility :exec
INSERT INTO equipment_abilities (data_hash, type, classification, specific_character_id, version, priority, pool_1_amt, pool_2_amt, empty_slots_amt)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateEquipmentAbilityParams struct {
	DataHash            string
	Type                EquipType
	Classification      EquipClass
	SpecificCharacterID sql.NullInt32
	Version             sql.NullInt32
	Priority            sql.NullInt32
	Pool1Amt            sql.NullInt32
	Pool2Amt            sql.NullInt32
	EmptySlotsAmt       int32
}

func (q *Queries) CreateEquipmentAbility(ctx context.Context, arg CreateEquipmentAbilityParams) error {
	_, err := q.db.ExecContext(ctx, createEquipmentAbility,
		arg.DataHash,
		arg.Type,
		arg.Classification,
		arg.SpecificCharacterID,
		arg.Version,
		arg.Priority,
		arg.Pool1Amt,
		arg.Pool2Amt,
		arg.EmptySlotsAmt,
	)
	return err
}

const updateCelestialWeapon = `-- name: UpdateCelestialWeapon :exec
UPDATE celestial_weapons
SET data_hash = $1,
    name = $2,
    key_item_base = $3,
    formula = $4,
    character_id = $5,
    aeon_id = $6
WHERE id = $7
`

type UpdateCelestialWeaponParams struct {
	DataHash    string
	Name        string
	KeyItemBase KeyItemBase
	Formula     CelestialFormula
	CharacterID sql.NullInt32
	AeonID      sql.NullInt32
	ID          int32
}

func (q *Queries) UpdateCelestialWeapon(ctx context.Context, arg UpdateCelestialWeaponParams) error {
	_, err := q.db.ExecContext(ctx, updateCelestialWeapon,
		arg.DataHash,
		arg.Name,
		arg.KeyItemBase,
		arg.Formula,
		arg.CharacterID,
		arg.AeonID,
		arg.ID,
	)
	return err
}
