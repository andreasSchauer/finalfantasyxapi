// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: equipment.sql

package database

import (
	"context"
	"database/sql"
)

const createAutoAbilitiesAddedStatusResistsJunction = `-- name: CreateAutoAbilitiesAddedStatusResistsJunction :exec
INSERT INTO j_auto_abilities_added_status_resists (data_hash, auto_ability_id, status_resist_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAutoAbilitiesAddedStatusResistsJunctionParams struct {
	DataHash       string
	AutoAbilityID  int32
	StatusResistID int32
}

func (q *Queries) CreateAutoAbilitiesAddedStatusResistsJunction(ctx context.Context, arg CreateAutoAbilitiesAddedStatusResistsJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createAutoAbilitiesAddedStatusResistsJunction, arg.DataHash, arg.AutoAbilityID, arg.StatusResistID)
	return err
}

const createAutoAbilitiesAddedStatussesJunction = `-- name: CreateAutoAbilitiesAddedStatussesJunction :exec
INSERT INTO j_auto_abilities_added_statusses (data_hash, auto_ability_id, status_condition_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAutoAbilitiesAddedStatussesJunctionParams struct {
	DataHash          string
	AutoAbilityID     int32
	StatusConditionID int32
}

func (q *Queries) CreateAutoAbilitiesAddedStatussesJunction(ctx context.Context, arg CreateAutoAbilitiesAddedStatussesJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createAutoAbilitiesAddedStatussesJunction, arg.DataHash, arg.AutoAbilityID, arg.StatusConditionID)
	return err
}

const createAutoAbilitiesLockedOutJunction = `-- name: CreateAutoAbilitiesLockedOutJunction :exec
INSERT INTO j_auto_abilities_locked_out (data_hash, parent_ability_id, child_ability_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAutoAbilitiesLockedOutJunctionParams struct {
	DataHash        string
	ParentAbilityID int32
	ChildAbilityID  int32
}

func (q *Queries) CreateAutoAbilitiesLockedOutJunction(ctx context.Context, arg CreateAutoAbilitiesLockedOutJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createAutoAbilitiesLockedOutJunction, arg.DataHash, arg.ParentAbilityID, arg.ChildAbilityID)
	return err
}

const createAutoAbilitiesModifierChangesJunction = `-- name: CreateAutoAbilitiesModifierChangesJunction :exec
INSERT INTO j_auto_abilities_modifier_changes (data_hash, auto_ability_id, modifier_change_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAutoAbilitiesModifierChangesJunctionParams struct {
	DataHash         string
	AutoAbilityID    int32
	ModifierChangeID int32
}

func (q *Queries) CreateAutoAbilitiesModifierChangesJunction(ctx context.Context, arg CreateAutoAbilitiesModifierChangesJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createAutoAbilitiesModifierChangesJunction, arg.DataHash, arg.AutoAbilityID, arg.ModifierChangeID)
	return err
}

const createAutoAbilitiesRelatedStatsJunction = `-- name: CreateAutoAbilitiesRelatedStatsJunction :exec
INSERT INTO j_auto_abilities_related_stats(data_hash, auto_ability_id, stat_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAutoAbilitiesRelatedStatsJunctionParams struct {
	DataHash      string
	AutoAbilityID int32
	StatID        int32
}

func (q *Queries) CreateAutoAbilitiesRelatedStatsJunction(ctx context.Context, arg CreateAutoAbilitiesRelatedStatsJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createAutoAbilitiesRelatedStatsJunction, arg.DataHash, arg.AutoAbilityID, arg.StatID)
	return err
}

const createAutoAbilitiesRequiredItemJunction = `-- name: CreateAutoAbilitiesRequiredItemJunction :exec
INSERT INTO j_auto_abilities_required_item (data_hash, auto_ability_id, item_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAutoAbilitiesRequiredItemJunctionParams struct {
	DataHash      string
	AutoAbilityID int32
	ItemID        int32
}

func (q *Queries) CreateAutoAbilitiesRequiredItemJunction(ctx context.Context, arg CreateAutoAbilitiesRequiredItemJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createAutoAbilitiesRequiredItemJunction, arg.DataHash, arg.AutoAbilityID, arg.ItemID)
	return err
}

const createAutoAbilitiesStatChangesJunction = `-- name: CreateAutoAbilitiesStatChangesJunction :exec
INSERT INTO j_auto_abilities_stat_changes (data_hash, auto_ability_id, stat_change_id)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAutoAbilitiesStatChangesJunctionParams struct {
	DataHash      string
	AutoAbilityID int32
	StatChangeID  int32
}

func (q *Queries) CreateAutoAbilitiesStatChangesJunction(ctx context.Context, arg CreateAutoAbilitiesStatChangesJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createAutoAbilitiesStatChangesJunction, arg.DataHash, arg.AutoAbilityID, arg.StatChangeID)
	return err
}

const createAutoAbility = `-- name: CreateAutoAbility :one
INSERT INTO auto_abilities (data_hash, name, description, effect, type, category, ability_value, activation_condition, counter)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = auto_abilities.data_hash
RETURNING id, data_hash, name, description, effect, type, category, ability_value, activation_condition, counter, required_item_amount_id, grad_rcvry_stat_id, on_hit_element_id, added_elem_affinity_id, on_hit_status_id, added_property_id, cnvrsn_from_mod_id, cnvrsn_to_mod_id
`

type CreateAutoAbilityParams struct {
	DataHash            string
	Name                string
	Description         sql.NullString
	Effect              string
	Type                NullEquipType
	Category            AutoAbilityCategory
	AbilityValue        sql.NullInt32
	ActivationCondition NullAaActivationCondition
	Counter             NullCounterType
}

func (q *Queries) CreateAutoAbility(ctx context.Context, arg CreateAutoAbilityParams) (AutoAbility, error) {
	row := q.db.QueryRowContext(ctx, createAutoAbility,
		arg.DataHash,
		arg.Name,
		arg.Description,
		arg.Effect,
		arg.Type,
		arg.Category,
		arg.AbilityValue,
		arg.ActivationCondition,
		arg.Counter,
	)
	var i AutoAbility
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Description,
		&i.Effect,
		&i.Type,
		&i.Category,
		&i.AbilityValue,
		&i.ActivationCondition,
		&i.Counter,
		&i.RequiredItemAmountID,
		&i.GradRcvryStatID,
		&i.OnHitElementID,
		&i.AddedElemAffinityID,
		&i.OnHitStatusID,
		&i.AddedPropertyID,
		&i.CnvrsnFromModID,
		&i.CnvrsnToModID,
	)
	return i, err
}

const createCelestialWeapon = `-- name: CreateCelestialWeapon :one
INSERT INTO celestial_weapons (data_hash, name, key_item_base, formula)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = celestial_weapons.data_hash
RETURNING id, data_hash, name, key_item_base, formula, character_id, aeon_id
`

type CreateCelestialWeaponParams struct {
	DataHash    string
	Name        string
	KeyItemBase KeyItemBase
	Formula     CelestialFormula
}

func (q *Queries) CreateCelestialWeapon(ctx context.Context, arg CreateCelestialWeaponParams) (CelestialWeapon, error) {
	row := q.db.QueryRowContext(ctx, createCelestialWeapon,
		arg.DataHash,
		arg.Name,
		arg.KeyItemBase,
		arg.Formula,
	)
	var i CelestialWeapon
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.KeyItemBase,
		&i.Formula,
		&i.CharacterID,
		&i.AeonID,
	)
	return i, err
}

const createEquipmentName = `-- name: CreateEquipmentName :one
INSERT INTO equipment_names (data_hash, character_id, name)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = equipment_names.data_hash
RETURNING id, data_hash, character_id, name
`

type CreateEquipmentNameParams struct {
	DataHash    string
	CharacterID int32
	Name        string
}

func (q *Queries) CreateEquipmentName(ctx context.Context, arg CreateEquipmentNameParams) (EquipmentName, error) {
	row := q.db.QueryRowContext(ctx, createEquipmentName, arg.DataHash, arg.CharacterID, arg.Name)
	var i EquipmentName
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.CharacterID,
		&i.Name,
	)
	return i, err
}

const createEquipmentTable = `-- name: CreateEquipmentTable :one
INSERT INTO equipment_tables (data_hash, type, classification, specific_character_id, version, priority, pool_1_amt, pool_2_amt, empty_slots_amt)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = equipment_tables.data_hash
RETURNING id, data_hash, type, classification, specific_character_id, version, priority, pool_1_amt, pool_2_amt, empty_slots_amt
`

type CreateEquipmentTableParams struct {
	DataHash            string
	Type                EquipType
	Classification      EquipClass
	SpecificCharacterID sql.NullInt32
	Version             sql.NullInt32
	Priority            sql.NullInt32
	Pool1Amt            sql.NullInt32
	Pool2Amt            sql.NullInt32
	EmptySlotsAmt       int32
}

func (q *Queries) CreateEquipmentTable(ctx context.Context, arg CreateEquipmentTableParams) (EquipmentTable, error) {
	row := q.db.QueryRowContext(ctx, createEquipmentTable,
		arg.DataHash,
		arg.Type,
		arg.Classification,
		arg.SpecificCharacterID,
		arg.Version,
		arg.Priority,
		arg.Pool1Amt,
		arg.Pool2Amt,
		arg.EmptySlotsAmt,
	)
	var i EquipmentTable
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Type,
		&i.Classification,
		&i.SpecificCharacterID,
		&i.Version,
		&i.Priority,
		&i.Pool1Amt,
		&i.Pool2Amt,
		&i.EmptySlotsAmt,
	)
	return i, err
}

const createEquipmentTablesAbilityPoolJunction = `-- name: CreateEquipmentTablesAbilityPoolJunction :exec
INSERT INTO j_equipment_tables_ability_pool (data_hash, equipment_table_id, auto_ability_id, ability_pool)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateEquipmentTablesAbilityPoolJunctionParams struct {
	DataHash         string
	EquipmentTableID int32
	AutoAbilityID    int32
	AbilityPool      AutoAbilityPool
}

func (q *Queries) CreateEquipmentTablesAbilityPoolJunction(ctx context.Context, arg CreateEquipmentTablesAbilityPoolJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createEquipmentTablesAbilityPoolJunction,
		arg.DataHash,
		arg.EquipmentTableID,
		arg.AutoAbilityID,
		arg.AbilityPool,
	)
	return err
}

const createEquipmentTablesNamesJunction = `-- name: CreateEquipmentTablesNamesJunction :exec
INSERT INTO j_equipment_tables_names (data_hash, equipment_table_id, equipment_name_id, celestial_weapon_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateEquipmentTablesNamesJunctionParams struct {
	DataHash          string
	EquipmentTableID  int32
	EquipmentNameID   int32
	CelestialWeaponID sql.NullInt32
}

func (q *Queries) CreateEquipmentTablesNamesJunction(ctx context.Context, arg CreateEquipmentTablesNamesJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createEquipmentTablesNamesJunction,
		arg.DataHash,
		arg.EquipmentTableID,
		arg.EquipmentNameID,
		arg.CelestialWeaponID,
	)
	return err
}

const updateAutoAbility = `-- name: UpdateAutoAbility :exec
UPDATE auto_abilities
SET data_hash = $1,
    grad_rcvry_stat_id = $2,
    on_hit_element_id = $3,
    added_elem_affinity_id = $4,
    on_hit_status_id = $5,
    added_property_id = $6,
    cnvrsn_from_mod_id = $7,
    cnvrsn_to_mod_id = $8
WHERE id = $9
`

type UpdateAutoAbilityParams struct {
	DataHash            string
	GradRcvryStatID     sql.NullInt32
	OnHitElementID      sql.NullInt32
	AddedElemAffinityID sql.NullInt32
	OnHitStatusID       sql.NullInt32
	AddedPropertyID     sql.NullInt32
	CnvrsnFromModID     sql.NullInt32
	CnvrsnToModID       sql.NullInt32
	ID                  int32
}

func (q *Queries) UpdateAutoAbility(ctx context.Context, arg UpdateAutoAbilityParams) error {
	_, err := q.db.ExecContext(ctx, updateAutoAbility,
		arg.DataHash,
		arg.GradRcvryStatID,
		arg.OnHitElementID,
		arg.AddedElemAffinityID,
		arg.OnHitStatusID,
		arg.AddedPropertyID,
		arg.CnvrsnFromModID,
		arg.CnvrsnToModID,
		arg.ID,
	)
	return err
}

const updateCelestialWeapon = `-- name: UpdateCelestialWeapon :exec
UPDATE celestial_weapons
SET data_hash = $1,
    character_id = $2,
    aeon_id = $3
WHERE id = $4
`

type UpdateCelestialWeaponParams struct {
	DataHash    string
	CharacterID sql.NullInt32
	AeonID      sql.NullInt32
	ID          int32
}

func (q *Queries) UpdateCelestialWeapon(ctx context.Context, arg UpdateCelestialWeaponParams) error {
	_, err := q.db.ExecContext(ctx, updateCelestialWeapon,
		arg.DataHash,
		arg.CharacterID,
		arg.AeonID,
		arg.ID,
	)
	return err
}
