// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: battle_interactions.sql

package database

import (
	"context"
	"database/sql"
)

const createAbilityAccuracy = `-- name: CreateAbilityAccuracy :one
INSERT INTO ability_accuracies (data_hash, acc_source, hit_chance, acc_modifier)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = ability_accuracies.data_hash
RETURNING id, data_hash, acc_source, hit_chance, acc_modifier
`

type CreateAbilityAccuracyParams struct {
	DataHash    string
	AccSource   AccSourceType
	HitChance   interface{}
	AccModifier sql.NullFloat64
}

func (q *Queries) CreateAbilityAccuracy(ctx context.Context, arg CreateAbilityAccuracyParams) (AbilityAccuracy, error) {
	row := q.db.QueryRowContext(ctx, createAbilityAccuracy,
		arg.DataHash,
		arg.AccSource,
		arg.HitChance,
		arg.AccModifier,
	)
	var i AbilityAccuracy
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.AccSource,
		&i.HitChance,
		&i.AccModifier,
	)
	return i, err
}

const createAbilityDamage = `-- name: CreateAbilityDamage :one
INSERT INTO ability_damages (data_hash, condition, attack_type, stat_id, damage_type, damage_formula, damage_constant)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = ability_damages.data_hash
RETURNING id, data_hash, condition, attack_type, stat_id, damage_type, damage_formula, damage_constant
`

type CreateAbilityDamageParams struct {
	DataHash       string
	Condition      sql.NullString
	AttackType     AttackType
	StatID         int32
	DamageType     DamageType
	DamageFormula  DamageFormula
	DamageConstant interface{}
}

func (q *Queries) CreateAbilityDamage(ctx context.Context, arg CreateAbilityDamageParams) (AbilityDamage, error) {
	row := q.db.QueryRowContext(ctx, createAbilityDamage,
		arg.DataHash,
		arg.Condition,
		arg.AttackType,
		arg.StatID,
		arg.DamageType,
		arg.DamageFormula,
		arg.DamageConstant,
	)
	var i AbilityDamage
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Condition,
		&i.AttackType,
		&i.StatID,
		&i.DamageType,
		&i.DamageFormula,
		&i.DamageConstant,
	)
	return i, err
}

const createBattleIntAffectedByJunction = `-- name: CreateBattleIntAffectedByJunction :exec
INSERT INTO j_battle_interactions_affected_by (data_hash, ability_id, battle_interaction_id, status_condition_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateBattleIntAffectedByJunctionParams struct {
	DataHash            string
	AbilityID           int32
	BattleInteractionID int32
	StatusConditionID   int32
}

func (q *Queries) CreateBattleIntAffectedByJunction(ctx context.Context, arg CreateBattleIntAffectedByJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createBattleIntAffectedByJunction,
		arg.DataHash,
		arg.AbilityID,
		arg.BattleInteractionID,
		arg.StatusConditionID,
	)
	return err
}

const createBattleIntCopiedConditionsJunction = `-- name: CreateBattleIntCopiedConditionsJunction :exec
INSERT INTO j_battle_interactions_copied_status_conditions (data_hash, ability_id, battle_interaction_id, inflicted_status_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateBattleIntCopiedConditionsJunctionParams struct {
	DataHash            string
	AbilityID           int32
	BattleInteractionID int32
	InflictedStatusID   int32
}

func (q *Queries) CreateBattleIntCopiedConditionsJunction(ctx context.Context, arg CreateBattleIntCopiedConditionsJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createBattleIntCopiedConditionsJunction,
		arg.DataHash,
		arg.AbilityID,
		arg.BattleInteractionID,
		arg.InflictedStatusID,
	)
	return err
}

const createBattleIntDamageJunction = `-- name: CreateBattleIntDamageJunction :exec
INSERT INTO j_battle_interaction_damage (data_hash, ability_id, battle_interaction_id, damage_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateBattleIntDamageJunctionParams struct {
	DataHash            string
	AbilityID           int32
	BattleInteractionID int32
	DamageID            int32
}

func (q *Queries) CreateBattleIntDamageJunction(ctx context.Context, arg CreateBattleIntDamageJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createBattleIntDamageJunction,
		arg.DataHash,
		arg.AbilityID,
		arg.BattleInteractionID,
		arg.DamageID,
	)
	return err
}

const createBattleIntInflictedConditionsJunction = `-- name: CreateBattleIntInflictedConditionsJunction :exec
INSERT INTO j_battle_interactions_inflicted_status_conditions (data_hash, ability_id, battle_interaction_id, inflicted_status_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateBattleIntInflictedConditionsJunctionParams struct {
	DataHash            string
	AbilityID           int32
	BattleInteractionID int32
	InflictedStatusID   int32
}

func (q *Queries) CreateBattleIntInflictedConditionsJunction(ctx context.Context, arg CreateBattleIntInflictedConditionsJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createBattleIntInflictedConditionsJunction,
		arg.DataHash,
		arg.AbilityID,
		arg.BattleInteractionID,
		arg.InflictedStatusID,
	)
	return err
}

const createBattleIntInflictedDelayJunction = `-- name: CreateBattleIntInflictedDelayJunction :exec
INSERT INTO j_battle_interactions_inflicted_delay (data_hash, ability_id, battle_interaction_id, inflicted_delay_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateBattleIntInflictedDelayJunctionParams struct {
	DataHash            string
	AbilityID           int32
	BattleInteractionID int32
	InflictedDelayID    int32
}

func (q *Queries) CreateBattleIntInflictedDelayJunction(ctx context.Context, arg CreateBattleIntInflictedDelayJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createBattleIntInflictedDelayJunction,
		arg.DataHash,
		arg.AbilityID,
		arg.BattleInteractionID,
		arg.InflictedDelayID,
	)
	return err
}

const createBattleIntModifierChangesJunction = `-- name: CreateBattleIntModifierChangesJunction :exec
INSERT INTO j_battle_interactions_modifier_changes (data_hash, ability_id, battle_interaction_id, modifier_change_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateBattleIntModifierChangesJunctionParams struct {
	DataHash            string
	AbilityID           int32
	BattleInteractionID int32
	ModifierChangeID    int32
}

func (q *Queries) CreateBattleIntModifierChangesJunction(ctx context.Context, arg CreateBattleIntModifierChangesJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createBattleIntModifierChangesJunction,
		arg.DataHash,
		arg.AbilityID,
		arg.BattleInteractionID,
		arg.ModifierChangeID,
	)
	return err
}

const createBattleIntRemovedConditionsJunction = `-- name: CreateBattleIntRemovedConditionsJunction :exec
INSERT INTO j_battle_interactions_removed_status_conditions (data_hash, ability_id, battle_interaction_id, status_condition_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateBattleIntRemovedConditionsJunctionParams struct {
	DataHash            string
	AbilityID           int32
	BattleInteractionID int32
	StatusConditionID   int32
}

func (q *Queries) CreateBattleIntRemovedConditionsJunction(ctx context.Context, arg CreateBattleIntRemovedConditionsJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createBattleIntRemovedConditionsJunction,
		arg.DataHash,
		arg.AbilityID,
		arg.BattleInteractionID,
		arg.StatusConditionID,
	)
	return err
}

const createBattleIntStatChangesJunction = `-- name: CreateBattleIntStatChangesJunction :exec
INSERT INTO j_battle_interactions_stat_changes (data_hash, ability_id, battle_interaction_id, stat_change_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateBattleIntStatChangesJunctionParams struct {
	DataHash            string
	AbilityID           int32
	BattleInteractionID int32
	StatChangeID        int32
}

func (q *Queries) CreateBattleIntStatChangesJunction(ctx context.Context, arg CreateBattleIntStatChangesJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createBattleIntStatChangesJunction,
		arg.DataHash,
		arg.AbilityID,
		arg.BattleInteractionID,
		arg.StatChangeID,
	)
	return err
}

const createBattleInteraction = `-- name: CreateBattleInteraction :one
INSERT INTO battle_interactions (data_hash, target, based_on_phys_attack, range, shatter_rate, accuracy_id, hit_amount, special_action)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = battle_interactions.data_hash
RETURNING id, data_hash, target, based_on_phys_attack, range, shatter_rate, accuracy_id, hit_amount, special_action, damage_id
`

type CreateBattleInteractionParams struct {
	DataHash          string
	Target            TargetType
	BasedOnPhysAttack bool
	Range             interface{}
	ShatterRate       interface{}
	AccuracyID        int32
	HitAmount         int32
	SpecialAction     NullSpecialActionType
}

func (q *Queries) CreateBattleInteraction(ctx context.Context, arg CreateBattleInteractionParams) (BattleInteraction, error) {
	row := q.db.QueryRowContext(ctx, createBattleInteraction,
		arg.DataHash,
		arg.Target,
		arg.BasedOnPhysAttack,
		arg.Range,
		arg.ShatterRate,
		arg.AccuracyID,
		arg.HitAmount,
		arg.SpecialAction,
	)
	var i BattleInteraction
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Target,
		&i.BasedOnPhysAttack,
		&i.Range,
		&i.ShatterRate,
		&i.AccuracyID,
		&i.HitAmount,
		&i.SpecialAction,
		&i.DamageID,
	)
	return i, err
}

const createDamage = `-- name: CreateDamage :one
INSERT INTO damages (data_hash, critical, critical_plus_val, is_piercing, break_dmg_limit, element_id)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = damages.data_hash
RETURNING id, data_hash, critical, critical_plus_val, is_piercing, break_dmg_limit, element_id
`

type CreateDamageParams struct {
	DataHash        string
	Critical        NullCriticalType
	CriticalPlusVal sql.NullInt32
	IsPiercing      bool
	BreakDmgLimit   NullBreakDmgLmtType
	ElementID       sql.NullInt32
}

func (q *Queries) CreateDamage(ctx context.Context, arg CreateDamageParams) (Damage, error) {
	row := q.db.QueryRowContext(ctx, createDamage,
		arg.DataHash,
		arg.Critical,
		arg.CriticalPlusVal,
		arg.IsPiercing,
		arg.BreakDmgLimit,
		arg.ElementID,
	)
	var i Damage
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Critical,
		&i.CriticalPlusVal,
		&i.IsPiercing,
		&i.BreakDmgLimit,
		&i.ElementID,
	)
	return i, err
}

const createDamagesDamageCalcJunction = `-- name: CreateDamagesDamageCalcJunction :exec
INSERT INTO j_damages_damage_calc (data_hash, ability_id, battle_interaction_id, damage_id, ability_damage_id)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateDamagesDamageCalcJunctionParams struct {
	DataHash            string
	AbilityID           int32
	BattleInteractionID int32
	DamageID            int32
	AbilityDamageID     int32
}

func (q *Queries) CreateDamagesDamageCalcJunction(ctx context.Context, arg CreateDamagesDamageCalcJunctionParams) error {
	_, err := q.db.ExecContext(ctx, createDamagesDamageCalcJunction,
		arg.DataHash,
		arg.AbilityID,
		arg.BattleInteractionID,
		arg.DamageID,
		arg.AbilityDamageID,
	)
	return err
}

const createInflictedDelay = `-- name: CreateInflictedDelay :one
INSERT INTO inflicted_delays (data_hash, condition, ctb_attack_type, delay_type, damage_constant)
VALUES ( $1, $2, $3, $4, $5)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = inflicted_delays.data_hash
RETURNING id, data_hash, condition, ctb_attack_type, delay_type, damage_constant
`

type CreateInflictedDelayParams struct {
	DataHash       string
	Condition      sql.NullString
	CtbAttackType  CtbAttackType
	DelayType      DelayType
	DamageConstant interface{}
}

func (q *Queries) CreateInflictedDelay(ctx context.Context, arg CreateInflictedDelayParams) (InflictedDelay, error) {
	row := q.db.QueryRowContext(ctx, createInflictedDelay,
		arg.DataHash,
		arg.Condition,
		arg.CtbAttackType,
		arg.DelayType,
		arg.DamageConstant,
	)
	var i InflictedDelay
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Condition,
		&i.CtbAttackType,
		&i.DelayType,
		&i.DamageConstant,
	)
	return i, err
}

const createInflictedStatus = `-- name: CreateInflictedStatus :one
INSERT INTO inflicted_statusses (data_hash, status_condition_id, probability, duration_type, amount)
VALUES ( $1, $2, $3, $4, $5)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = inflicted_statusses.data_hash
RETURNING id, data_hash, status_condition_id, probability, duration_type, amount
`

type CreateInflictedStatusParams struct {
	DataHash          string
	StatusConditionID int32
	Probability       interface{}
	DurationType      DurationType
	Amount            sql.NullInt32
}

func (q *Queries) CreateInflictedStatus(ctx context.Context, arg CreateInflictedStatusParams) (InflictedStatuss, error) {
	row := q.db.QueryRowContext(ctx, createInflictedStatus,
		arg.DataHash,
		arg.StatusConditionID,
		arg.Probability,
		arg.DurationType,
		arg.Amount,
	)
	var i InflictedStatuss
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.StatusConditionID,
		&i.Probability,
		&i.DurationType,
		&i.Amount,
	)
	return i, err
}

const createModifierChange = `-- name: CreateModifierChange :one
INSERT INTO modifier_changes (data_hash, modifier_id, calculation_type, value)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = modifier_changes.data_hash
RETURNING id, data_hash, modifier_id, calculation_type, value
`

type CreateModifierChangeParams struct {
	DataHash        string
	ModifierID      int32
	CalculationType CalculationType
	Value           float32
}

func (q *Queries) CreateModifierChange(ctx context.Context, arg CreateModifierChangeParams) (ModifierChange, error) {
	row := q.db.QueryRowContext(ctx, createModifierChange,
		arg.DataHash,
		arg.ModifierID,
		arg.CalculationType,
		arg.Value,
	)
	var i ModifierChange
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.ModifierID,
		&i.CalculationType,
		&i.Value,
	)
	return i, err
}

const createStatChange = `-- name: CreateStatChange :one
INSERT INTO stat_changes (data_hash, stat_id, calculation_type, value)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = stat_changes.data_hash
RETURNING id, data_hash, stat_id, calculation_type, value
`

type CreateStatChangeParams struct {
	DataHash        string
	StatID          int32
	CalculationType CalculationType
	Value           float32
}

func (q *Queries) CreateStatChange(ctx context.Context, arg CreateStatChangeParams) (StatChange, error) {
	row := q.db.QueryRowContext(ctx, createStatChange,
		arg.DataHash,
		arg.StatID,
		arg.CalculationType,
		arg.Value,
	)
	var i StatChange
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.StatID,
		&i.CalculationType,
		&i.Value,
	)
	return i, err
}
