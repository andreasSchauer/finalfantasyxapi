// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: characters.sql

package database

import (
	"context"
	"database/sql"
)

const createAeon = `-- name: CreateAeon :exec
INSERT INTO aeons (data_hash, name, category, is_optional, battles_to_regenerate, phys_atk_damage_constant, phys_atk_range, phys_atk_shatter_rate, phys_atk_acc_source, phys_atk_hit_chance, phys_atk_acc_modifier)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateAeonParams struct {
	DataHash              string
	Name                  string
	Category              NullAeonCategory
	IsOptional            bool
	BattlesToRegenerate   int32
	PhysAtkDamageConstant sql.NullInt32
	PhysAtkRange          interface{}
	PhysAtkShatterRate    interface{}
	PhysAtkAccSource      NullAccuracySource
	PhysAtkHitChance      interface{}
	PhysAtkAccModifier    sql.NullFloat64
}

func (q *Queries) CreateAeon(ctx context.Context, arg CreateAeonParams) error {
	_, err := q.db.ExecContext(ctx, createAeon,
		arg.DataHash,
		arg.Name,
		arg.Category,
		arg.IsOptional,
		arg.BattlesToRegenerate,
		arg.PhysAtkDamageConstant,
		arg.PhysAtkRange,
		arg.PhysAtkShatterRate,
		arg.PhysAtkAccSource,
		arg.PhysAtkHitChance,
		arg.PhysAtkAccModifier,
	)
	return err
}

const createCharacter = `-- name: CreateCharacter :exec
INSERT INTO characters (data_hash, name, weapon_type, armor_type, physical_attack_range, can_fight_underwater)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateCharacterParams struct {
	DataHash            string
	Name                string
	WeaponType          WeaponType
	ArmorType           ArmorType
	PhysicalAttackRange interface{}
	CanFightUnderwater  bool
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) error {
	_, err := q.db.ExecContext(ctx, createCharacter,
		arg.DataHash,
		arg.Name,
		arg.WeaponType,
		arg.ArmorType,
		arg.PhysicalAttackRange,
		arg.CanFightUnderwater,
	)
	return err
}

const createDefaultAbilitesEntry = `-- name: CreateDefaultAbilitesEntry :exec
INSERT INTO default_abilities (data_hash, name)
VALUES ($1, $2)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateDefaultAbilitesEntryParams struct {
	DataHash string
	Name     string
}

func (q *Queries) CreateDefaultAbilitesEntry(ctx context.Context, arg CreateDefaultAbilitesEntryParams) error {
	_, err := q.db.ExecContext(ctx, createDefaultAbilitesEntry, arg.DataHash, arg.Name)
	return err
}
