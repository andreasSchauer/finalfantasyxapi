// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: items.sql

package database

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (data_hash, master_items_id, description, effect, sphere_grid_description, category, usability, base_price, sell_value)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = items.data_hash
RETURNING id, data_hash, master_items_id, description, effect, sphere_grid_description, category, usability, base_price, sell_value
`

type CreateItemParams struct {
	DataHash              string
	MasterItemsID         int32
	Description           string
	Effect                string
	SphereGridDescription sql.NullString
	Category              ItemCategory
	Usability             NullItemUsability
	BasePrice             sql.NullInt32
	SellValue             int32
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.DataHash,
		arg.MasterItemsID,
		arg.Description,
		arg.Effect,
		arg.SphereGridDescription,
		arg.Category,
		arg.Usability,
		arg.BasePrice,
		arg.SellValue,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.MasterItemsID,
		&i.Description,
		&i.Effect,
		&i.SphereGridDescription,
		&i.Category,
		&i.Usability,
		&i.BasePrice,
		&i.SellValue,
	)
	return i, err
}

const createItemAbility = `-- name: CreateItemAbility :exec
INSERT INTO item_abilities (data_hash, item_id, ability_id, cursor)
VALUES ($1, $2, $3, $4)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateItemAbilityParams struct {
	DataHash  string
	ItemID    int32
	AbilityID int32
	Cursor    TargetType
}

func (q *Queries) CreateItemAbility(ctx context.Context, arg CreateItemAbilityParams) error {
	_, err := q.db.ExecContext(ctx, createItemAbility,
		arg.DataHash,
		arg.ItemID,
		arg.AbilityID,
		arg.Cursor,
	)
	return err
}

const createKeyItem = `-- name: CreateKeyItem :exec
INSERT INTO key_items (data_hash, master_items_id, category, description, effect)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT(data_hash) DO NOTHING
`

type CreateKeyItemParams struct {
	DataHash      string
	MasterItemsID int32
	Category      KeyItemCategory
	Description   string
	Effect        string
}

func (q *Queries) CreateKeyItem(ctx context.Context, arg CreateKeyItemParams) error {
	_, err := q.db.ExecContext(ctx, createKeyItem,
		arg.DataHash,
		arg.MasterItemsID,
		arg.Category,
		arg.Description,
		arg.Effect,
	)
	return err
}

const createMasterItem = `-- name: CreateMasterItem :one
INSERT INTO master_items (data_hash, name, type)
VALUES ($1, $2, $3)
ON CONFLICT(data_hash) DO UPDATE SET data_hash = master_items.data_hash
RETURNING id, data_hash, name, type
`

type CreateMasterItemParams struct {
	DataHash string
	Name     string
	Type     ItemType
}

func (q *Queries) CreateMasterItem(ctx context.Context, arg CreateMasterItemParams) (MasterItem, error) {
	row := q.db.QueryRowContext(ctx, createMasterItem, arg.DataHash, arg.Name, arg.Type)
	var i MasterItem
	err := row.Scan(
		&i.ID,
		&i.DataHash,
		&i.Name,
		&i.Type,
	)
	return i, err
}
