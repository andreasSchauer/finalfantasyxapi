// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type AaActivationCondition string

const (
	AaActivationConditionAlways        AaActivationCondition = "always"
	AaActivationConditionActiveParty   AaActivationCondition = "active-party"
	AaActivationConditionHpCritical    AaActivationCondition = "hp-critical"
	AaActivationConditionOutsideBattle AaActivationCondition = "outside-battle"
)

func (e *AaActivationCondition) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AaActivationCondition(s)
	case string:
		*e = AaActivationCondition(s)
	default:
		return fmt.Errorf("unsupported scan type for AaActivationCondition: %T", src)
	}
	return nil
}

type NullAaActivationCondition struct {
	AaActivationCondition AaActivationCondition
	Valid                 bool // Valid is true if AaActivationCondition is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAaActivationCondition) Scan(value interface{}) error {
	if value == nil {
		ns.AaActivationCondition, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AaActivationCondition.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAaActivationCondition) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AaActivationCondition), nil
}

type AbilityType string

const (
	AbilityTypePlayerAbility    AbilityType = "player-ability"
	AbilityTypeEnemyAbility     AbilityType = "enemy-ability"
	AbilityTypeOverdriveAbility AbilityType = "overdrive-ability"
	AbilityTypeTriggerCommand   AbilityType = "trigger-command"
	AbilityTypeItem             AbilityType = "item"
)

func (e *AbilityType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AbilityType(s)
	case string:
		*e = AbilityType(s)
	default:
		return fmt.Errorf("unsupported scan type for AbilityType: %T", src)
	}
	return nil
}

type NullAbilityType struct {
	AbilityType AbilityType
	Valid       bool // Valid is true if AbilityType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAbilityType) Scan(value interface{}) error {
	if value == nil {
		ns.AbilityType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AbilityType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAbilityType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AbilityType), nil
}

type AccuracySource string

const (
	AccuracySourceAccuracy AccuracySource = "accuracy"
	AccuracySourceRate     AccuracySource = "rate"
)

func (e *AccuracySource) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccuracySource(s)
	case string:
		*e = AccuracySource(s)
	default:
		return fmt.Errorf("unsupported scan type for AccuracySource: %T", src)
	}
	return nil
}

type NullAccuracySource struct {
	AccuracySource AccuracySource
	Valid          bool // Valid is true if AccuracySource is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccuracySource) Scan(value interface{}) error {
	if value == nil {
		ns.AccuracySource, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccuracySource.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccuracySource) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccuracySource), nil
}

type AeonCategory string

const (
	AeonCategoryStandardAeons AeonCategory = "standard-aeons"
	AeonCategoryMagusSisters  AeonCategory = "magus-sisters"
)

func (e *AeonCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AeonCategory(s)
	case string:
		*e = AeonCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for AeonCategory: %T", src)
	}
	return nil
}

type NullAeonCategory struct {
	AeonCategory AeonCategory
	Valid        bool // Valid is true if AeonCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAeonCategory) Scan(value interface{}) error {
	if value == nil {
		ns.AeonCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AeonCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAeonCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AeonCategory), nil
}

type ArmorType string

const (
	ArmorTypeShield       ArmorType = "shield"
	ArmorTypeRing         ArmorType = "ring"
	ArmorTypeArmguard     ArmorType = "armguard"
	ArmorTypeBangle       ArmorType = "bangle"
	ArmorTypeArmlet       ArmorType = "armlet"
	ArmorTypeBracer       ArmorType = "bracer"
	ArmorTypeTarge        ArmorType = "targe"
	ArmorTypeSeymourArmor ArmorType = "seymour-armor"
)

func (e *ArmorType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ArmorType(s)
	case string:
		*e = ArmorType(s)
	default:
		return fmt.Errorf("unsupported scan type for ArmorType: %T", src)
	}
	return nil
}

type NullArmorType struct {
	ArmorType ArmorType
	Valid     bool // Valid is true if ArmorType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullArmorType) Scan(value interface{}) error {
	if value == nil {
		ns.ArmorType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ArmorType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullArmorType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ArmorType), nil
}

type AutoAbilityCategory string

const (
	AutoAbilityCategoryApOverdrive         AutoAbilityCategory = "ap-overdrive"
	AutoAbilityCategoryAutoCure            AutoAbilityCategory = "auto-cure"
	AutoAbilityCategoryAutoStatus          AutoAbilityCategory = "auto-status"
	AutoAbilityCategoryBreakLimit          AutoAbilityCategory = "break-limit"
	AutoAbilityCategoryCounter             AutoAbilityCategory = "counter"
	AutoAbilityCategoryElementalProtection AutoAbilityCategory = "elemental-protection"
	AutoAbilityCategoryElementalStrike     AutoAbilityCategory = "elemental-strike"
	AutoAbilityCategoryOther               AutoAbilityCategory = "other"
	AutoAbilityCategorySosStatus           AutoAbilityCategory = "sos-status"
	AutoAbilityCategoryStatX               AutoAbilityCategory = "stat-+x%"
	AutoAbilityCategoryStatusInfliction    AutoAbilityCategory = "status-infliction"
	AutoAbilityCategoryStatusProtection    AutoAbilityCategory = "status-protection"
)

func (e *AutoAbilityCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AutoAbilityCategory(s)
	case string:
		*e = AutoAbilityCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for AutoAbilityCategory: %T", src)
	}
	return nil
}

type NullAutoAbilityCategory struct {
	AutoAbilityCategory AutoAbilityCategory
	Valid               bool // Valid is true if AutoAbilityCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAutoAbilityCategory) Scan(value interface{}) error {
	if value == nil {
		ns.AutoAbilityCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AutoAbilityCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAutoAbilityCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AutoAbilityCategory), nil
}

type BlitzballItemSlot string

const (
	BlitzballItemSlot1st       BlitzballItemSlot = "1st"
	BlitzballItemSlot2nd       BlitzballItemSlot = "2nd"
	BlitzballItemSlot3rd       BlitzballItemSlot = "3rd"
	BlitzballItemSlotTopScorer BlitzballItemSlot = "top-scorer"
)

func (e *BlitzballItemSlot) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BlitzballItemSlot(s)
	case string:
		*e = BlitzballItemSlot(s)
	default:
		return fmt.Errorf("unsupported scan type for BlitzballItemSlot: %T", src)
	}
	return nil
}

type NullBlitzballItemSlot struct {
	BlitzballItemSlot BlitzballItemSlot
	Valid             bool // Valid is true if BlitzballItemSlot is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBlitzballItemSlot) Scan(value interface{}) error {
	if value == nil {
		ns.BlitzballItemSlot, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BlitzballItemSlot.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBlitzballItemSlot) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BlitzballItemSlot), nil
}

type BlitzballTournamentCategory string

const (
	BlitzballTournamentCategoryLeague     BlitzballTournamentCategory = "league"
	BlitzballTournamentCategoryTournament BlitzballTournamentCategory = "tournament"
)

func (e *BlitzballTournamentCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BlitzballTournamentCategory(s)
	case string:
		*e = BlitzballTournamentCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for BlitzballTournamentCategory: %T", src)
	}
	return nil
}

type NullBlitzballTournamentCategory struct {
	BlitzballTournamentCategory BlitzballTournamentCategory
	Valid                       bool // Valid is true if BlitzballTournamentCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBlitzballTournamentCategory) Scan(value interface{}) error {
	if value == nil {
		ns.BlitzballTournamentCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BlitzballTournamentCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBlitzballTournamentCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BlitzballTournamentCategory), nil
}

type CelestialFormula string

const (
	CelestialFormulaHpHigh CelestialFormula = "hp-high"
	CelestialFormulaHpLow  CelestialFormula = "hp-low"
	CelestialFormulaMpHigh CelestialFormula = "mp-high"
)

func (e *CelestialFormula) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CelestialFormula(s)
	case string:
		*e = CelestialFormula(s)
	default:
		return fmt.Errorf("unsupported scan type for CelestialFormula: %T", src)
	}
	return nil
}

type NullCelestialFormula struct {
	CelestialFormula CelestialFormula
	Valid            bool // Valid is true if CelestialFormula is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCelestialFormula) Scan(value interface{}) error {
	if value == nil {
		ns.CelestialFormula, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CelestialFormula.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCelestialFormula) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CelestialFormula), nil
}

type CounterType string

const (
	CounterTypePhysical CounterType = "physical"
	CounterTypeMagical  CounterType = "magical"
)

func (e *CounterType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CounterType(s)
	case string:
		*e = CounterType(s)
	default:
		return fmt.Errorf("unsupported scan type for CounterType: %T", src)
	}
	return nil
}

type NullCounterType struct {
	CounterType CounterType
	Valid       bool // Valid is true if CounterType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCounterType) Scan(value interface{}) error {
	if value == nil {
		ns.CounterType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CounterType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCounterType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CounterType), nil
}

type CreationsUnlockedCategory string

const (
	CreationsUnlockedCategoryArea    CreationsUnlockedCategory = "area"
	CreationsUnlockedCategorySpecies CreationsUnlockedCategory = "species"
)

func (e *CreationsUnlockedCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CreationsUnlockedCategory(s)
	case string:
		*e = CreationsUnlockedCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for CreationsUnlockedCategory: %T", src)
	}
	return nil
}

type NullCreationsUnlockedCategory struct {
	CreationsUnlockedCategory CreationsUnlockedCategory
	Valid                     bool // Valid is true if CreationsUnlockedCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCreationsUnlockedCategory) Scan(value interface{}) error {
	if value == nil {
		ns.CreationsUnlockedCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CreationsUnlockedCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCreationsUnlockedCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CreationsUnlockedCategory), nil
}

type CtbIconType string

const (
	CtbIconTypeMonster      CtbIconType = "monster"
	CtbIconTypeBoss         CtbIconType = "boss"
	CtbIconTypeBossNumbered CtbIconType = "boss-numbered"
	CtbIconTypeSummon       CtbIconType = "summon"
)

func (e *CtbIconType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CtbIconType(s)
	case string:
		*e = CtbIconType(s)
	default:
		return fmt.Errorf("unsupported scan type for CtbIconType: %T", src)
	}
	return nil
}

type NullCtbIconType struct {
	CtbIconType CtbIconType
	Valid       bool // Valid is true if CtbIconType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCtbIconType) Scan(value interface{}) error {
	if value == nil {
		ns.CtbIconType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CtbIconType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCtbIconType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CtbIconType), nil
}

type ElementType string

const (
	ElementTypeFire      ElementType = "fire"
	ElementTypeLightning ElementType = "lightning"
	ElementTypeWater     ElementType = "water"
	ElementTypeIce       ElementType = "ice"
	ElementTypeHoly      ElementType = "holy"
)

func (e *ElementType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ElementType(s)
	case string:
		*e = ElementType(s)
	default:
		return fmt.Errorf("unsupported scan type for ElementType: %T", src)
	}
	return nil
}

type NullElementType struct {
	ElementType ElementType
	Valid       bool // Valid is true if ElementType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullElementType) Scan(value interface{}) error {
	if value == nil {
		ns.ElementType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ElementType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullElementType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ElementType), nil
}

type EquipClass string

const (
	EquipClassStandard        EquipClass = "standard"
	EquipClassUnique          EquipClass = "unique"
	EquipClassCelestialWeapon EquipClass = "celestial-weapon"
)

func (e *EquipClass) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EquipClass(s)
	case string:
		*e = EquipClass(s)
	default:
		return fmt.Errorf("unsupported scan type for EquipClass: %T", src)
	}
	return nil
}

type NullEquipClass struct {
	EquipClass EquipClass
	Valid      bool // Valid is true if EquipClass is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEquipClass) Scan(value interface{}) error {
	if value == nil {
		ns.EquipClass, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EquipClass.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEquipClass) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EquipClass), nil
}

type EquipType string

const (
	EquipTypeWeapon EquipType = "weapon"
	EquipTypeArmor  EquipType = "armor"
)

func (e *EquipType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EquipType(s)
	case string:
		*e = EquipType(s)
	default:
		return fmt.Errorf("unsupported scan type for EquipType: %T", src)
	}
	return nil
}

type NullEquipType struct {
	EquipType EquipType
	Valid     bool // Valid is true if EquipType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEquipType) Scan(value interface{}) error {
	if value == nil {
		ns.EquipType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EquipType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEquipType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EquipType), nil
}

type ItemCategory string

const (
	ItemCategoryDistiller ItemCategory = "distiller"
	ItemCategoryHealing   ItemCategory = "healing"
	ItemCategoryOffensive ItemCategory = "offensive"
	ItemCategoryOther     ItemCategory = "other"
	ItemCategorySphere    ItemCategory = "sphere"
	ItemCategorySupport   ItemCategory = "support"
)

func (e *ItemCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemCategory(s)
	case string:
		*e = ItemCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemCategory: %T", src)
	}
	return nil
}

type NullItemCategory struct {
	ItemCategory ItemCategory
	Valid        bool // Valid is true if ItemCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemCategory) Scan(value interface{}) error {
	if value == nil {
		ns.ItemCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemCategory), nil
}

type ItemType string

const (
	ItemTypeItem    ItemType = "item"
	ItemTypeKeyItem ItemType = "key-item"
)

func (e *ItemType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemType(s)
	case string:
		*e = ItemType(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemType: %T", src)
	}
	return nil
}

type NullItemType struct {
	ItemType ItemType
	Valid    bool // Valid is true if ItemType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemType) Scan(value interface{}) error {
	if value == nil {
		ns.ItemType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemType), nil
}

type ItemUsability string

const (
	ItemUsabilityAlways        ItemUsability = "always"
	ItemUsabilityInBattle      ItemUsability = "in-battle"
	ItemUsabilityOutsideBattle ItemUsability = "outside-battle"
)

func (e *ItemUsability) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemUsability(s)
	case string:
		*e = ItemUsability(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemUsability: %T", src)
	}
	return nil
}

type NullItemUsability struct {
	ItemUsability ItemUsability
	Valid         bool // Valid is true if ItemUsability is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemUsability) Scan(value interface{}) error {
	if value == nil {
		ns.ItemUsability, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemUsability.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemUsability) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemUsability), nil
}

type KeyItemBase string

const (
	KeyItemBaseSun     KeyItemBase = "sun"
	KeyItemBaseMoon    KeyItemBase = "moon"
	KeyItemBaseJupiter KeyItemBase = "jupiter"
	KeyItemBaseVenus   KeyItemBase = "venus"
	KeyItemBaseSaturn  KeyItemBase = "saturn"
	KeyItemBaseMars    KeyItemBase = "mars"
	KeyItemBaseMercury KeyItemBase = "mercury"
)

func (e *KeyItemBase) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = KeyItemBase(s)
	case string:
		*e = KeyItemBase(s)
	default:
		return fmt.Errorf("unsupported scan type for KeyItemBase: %T", src)
	}
	return nil
}

type NullKeyItemBase struct {
	KeyItemBase KeyItemBase
	Valid       bool // Valid is true if KeyItemBase is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullKeyItemBase) Scan(value interface{}) error {
	if value == nil {
		ns.KeyItemBase, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.KeyItemBase.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullKeyItemBase) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.KeyItemBase), nil
}

type KeyItemCategory string

const (
	KeyItemCategoryCelestial   KeyItemCategory = "celestial"
	KeyItemCategoryJechtSphere KeyItemCategory = "jecht-sphere"
	KeyItemCategoryOther       KeyItemCategory = "other"
	KeyItemCategoryPrimer      KeyItemCategory = "primer"
	KeyItemCategoryStory       KeyItemCategory = "story"
)

func (e *KeyItemCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = KeyItemCategory(s)
	case string:
		*e = KeyItemCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for KeyItemCategory: %T", src)
	}
	return nil
}

type NullKeyItemCategory struct {
	KeyItemCategory KeyItemCategory
	Valid           bool // Valid is true if KeyItemCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullKeyItemCategory) Scan(value interface{}) error {
	if value == nil {
		ns.KeyItemCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.KeyItemCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullKeyItemCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.KeyItemCategory), nil
}

type LootType string

const (
	LootTypeItem      LootType = "item"
	LootTypeEquipment LootType = "equipment"
	LootTypeGil       LootType = "gil"
)

func (e *LootType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LootType(s)
	case string:
		*e = LootType(s)
	default:
		return fmt.Errorf("unsupported scan type for LootType: %T", src)
	}
	return nil
}

type NullLootType struct {
	LootType LootType
	Valid    bool // Valid is true if LootType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLootType) Scan(value interface{}) error {
	if value == nil {
		ns.LootType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LootType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLootType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LootType), nil
}

type MaCreationArea string

const (
	MaCreationAreaBesaid                 MaCreationArea = "besaid"
	MaCreationAreaKilika                 MaCreationArea = "kilika"
	MaCreationAreaMiihenHighroad         MaCreationArea = "mi'ihen-highroad"
	MaCreationAreaMushroomRockRoad       MaCreationArea = "mushroom-rock-road"
	MaCreationAreaDjose                  MaCreationArea = "djose"
	MaCreationAreaThunderPlains          MaCreationArea = "thunder-plains"
	MaCreationAreaMacalania              MaCreationArea = "macalania"
	MaCreationAreaBikanel                MaCreationArea = "bikanel"
	MaCreationAreaCalmLands              MaCreationArea = "calm-lands"
	MaCreationAreaCavernOfTheStolenFayth MaCreationArea = "cavern-of-the-stolen-fayth"
	MaCreationAreaMountGagazet           MaCreationArea = "mount-gagazet"
	MaCreationAreaSin                    MaCreationArea = "sin"
	MaCreationAreaOmegaRuins             MaCreationArea = "omega-ruins"
)

func (e *MaCreationArea) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MaCreationArea(s)
	case string:
		*e = MaCreationArea(s)
	default:
		return fmt.Errorf("unsupported scan type for MaCreationArea: %T", src)
	}
	return nil
}

type NullMaCreationArea struct {
	MaCreationArea MaCreationArea
	Valid          bool // Valid is true if MaCreationArea is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMaCreationArea) Scan(value interface{}) error {
	if value == nil {
		ns.MaCreationArea, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MaCreationArea.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMaCreationArea) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MaCreationArea), nil
}

type MaCreationCategory string

const (
	MaCreationCategoryArea     MaCreationCategory = "area"
	MaCreationCategorySpecies  MaCreationCategory = "species"
	MaCreationCategoryOriginal MaCreationCategory = "original"
)

func (e *MaCreationCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MaCreationCategory(s)
	case string:
		*e = MaCreationCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for MaCreationCategory: %T", src)
	}
	return nil
}

type NullMaCreationCategory struct {
	MaCreationCategory MaCreationCategory
	Valid              bool // Valid is true if MaCreationCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMaCreationCategory) Scan(value interface{}) error {
	if value == nil {
		ns.MaCreationCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MaCreationCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMaCreationCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MaCreationCategory), nil
}

type MaCreationSpecies string

const (
	MaCreationSpeciesBird      MaCreationSpecies = "bird"
	MaCreationSpeciesBomb      MaCreationSpecies = "bomb"
	MaCreationSpeciesDrake     MaCreationSpecies = "drake"
	MaCreationSpeciesElemental MaCreationSpecies = "elemental"
	MaCreationSpeciesEvilEye   MaCreationSpecies = "evil-eye"
	MaCreationSpeciesFlan      MaCreationSpecies = "flan"
	MaCreationSpeciesFungus    MaCreationSpecies = "fungus"
	MaCreationSpeciesHelm      MaCreationSpecies = "helm"
	MaCreationSpeciesImp       MaCreationSpecies = "imp"
	MaCreationSpeciesIronGiant MaCreationSpecies = "iron-giant"
	MaCreationSpeciesLupine    MaCreationSpecies = "lupine"
	MaCreationSpeciesReptile   MaCreationSpecies = "reptile"
	MaCreationSpeciesRuminant  MaCreationSpecies = "ruminant"
	MaCreationSpeciesWasp      MaCreationSpecies = "wasp"
)

func (e *MaCreationSpecies) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MaCreationSpecies(s)
	case string:
		*e = MaCreationSpecies(s)
	default:
		return fmt.Errorf("unsupported scan type for MaCreationSpecies: %T", src)
	}
	return nil
}

type NullMaCreationSpecies struct {
	MaCreationSpecies MaCreationSpecies
	Valid             bool // Valid is true if MaCreationSpecies is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMaCreationSpecies) Scan(value interface{}) error {
	if value == nil {
		ns.MaCreationSpecies, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MaCreationSpecies.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMaCreationSpecies) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MaCreationSpecies), nil
}

type MixCategory string

const (
	MixCategory9999Damage         MixCategory = "9999-damage"
	MixCategoryCriticalHits       MixCategory = "critical-hits"
	MixCategoryFireElemental      MixCategory = "fire-elemental"
	MixCategoryGravityBased       MixCategory = "gravity-based"
	MixCategoryHpMp               MixCategory = "hp-mp"
	MixCategoryIceElemental       MixCategory = "ice-elemental"
	MixCategoryLightningElemental MixCategory = "lightning-elemental"
	MixCategoryNonElemental       MixCategory = "non-elemental"
	MixCategoryOverdriveSpeed     MixCategory = "overdrive-speed"
	MixCategoryPositiveStatus     MixCategory = "positive-status"
	MixCategoryRecovery           MixCategory = "recovery"
	MixCategoryWaterElemental     MixCategory = "water-elemental"
)

func (e *MixCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MixCategory(s)
	case string:
		*e = MixCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for MixCategory: %T", src)
	}
	return nil
}

type NullMixCategory struct {
	MixCategory MixCategory
	Valid       bool // Valid is true if MixCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMixCategory) Scan(value interface{}) error {
	if value == nil {
		ns.MixCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MixCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMixCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MixCategory), nil
}

type MonsterSpecies string

const (
	MonsterSpeciesAdamantoise  MonsterSpecies = "adamantoise"
	MonsterSpeciesAeon         MonsterSpecies = "aeon"
	MonsterSpeciesArmor        MonsterSpecies = "armor"
	MonsterSpeciesBasilisk     MonsterSpecies = "basilisk"
	MonsterSpeciesBlade        MonsterSpecies = "blade"
	MonsterSpeciesBehemoth     MonsterSpecies = "behemoth"
	MonsterSpeciesBird         MonsterSpecies = "bird"
	MonsterSpeciesBomb         MonsterSpecies = "bomb"
	MonsterSpeciesCactuar      MonsterSpecies = "cactuar"
	MonsterSpeciesCephalopod   MonsterSpecies = "cephalopod"
	MonsterSpeciesChest        MonsterSpecies = "chest"
	MonsterSpeciesChimera      MonsterSpecies = "chimera"
	MonsterSpeciesCoeurl       MonsterSpecies = "coeurl"
	MonsterSpeciesDefender     MonsterSpecies = "defender"
	MonsterSpeciesDinofish     MonsterSpecies = "dinofish"
	MonsterSpeciesDoomstone    MonsterSpecies = "doomstone"
	MonsterSpeciesDrake        MonsterSpecies = "drake"
	MonsterSpeciesEater        MonsterSpecies = "eater"
	MonsterSpeciesElemental    MonsterSpecies = "elemental"
	MonsterSpeciesEvilEye      MonsterSpecies = "evil-eye"
	MonsterSpeciesFlan         MonsterSpecies = "flan"
	MonsterSpeciesFungus       MonsterSpecies = "fungus"
	MonsterSpeciesGel          MonsterSpecies = "gel"
	MonsterSpeciesGeo          MonsterSpecies = "geo"
	MonsterSpeciesHaizhe       MonsterSpecies = "haizhe"
	MonsterSpeciesHelm         MonsterSpecies = "helm"
	MonsterSpeciesHermit       MonsterSpecies = "hermit"
	MonsterSpeciesHumanoid     MonsterSpecies = "humanoid"
	MonsterSpeciesImp          MonsterSpecies = "imp"
	MonsterSpeciesIronGiant    MonsterSpecies = "iron-giant"
	MonsterSpeciesLarva        MonsterSpecies = "larva"
	MonsterSpeciesLupine       MonsterSpecies = "lupine"
	MonsterSpeciesMachina      MonsterSpecies = "machina"
	MonsterSpeciesMalboro      MonsterSpecies = "malboro"
	MonsterSpeciesMech         MonsterSpecies = "mech"
	MonsterSpeciesMimic        MonsterSpecies = "mimic"
	MonsterSpeciesOchu         MonsterSpecies = "ochu"
	MonsterSpeciesOgre         MonsterSpecies = "ogre"
	MonsterSpeciesPhantom      MonsterSpecies = "phantom"
	MonsterSpeciesPiranha      MonsterSpecies = "piranha"
	MonsterSpeciesPlant        MonsterSpecies = "plant"
	MonsterSpeciesReptile      MonsterSpecies = "reptile"
	MonsterSpeciesRoc          MonsterSpecies = "roc"
	MonsterSpeciesRuminant     MonsterSpecies = "ruminant"
	MonsterSpeciesSacredBeast  MonsterSpecies = "sacred-beast"
	MonsterSpeciesSahagin      MonsterSpecies = "sahagin"
	MonsterSpeciesSin          MonsterSpecies = "sin"
	MonsterSpeciesSinspawn     MonsterSpecies = "sinspawn"
	MonsterSpeciesSpellspinner MonsterSpecies = "spellspinner"
	MonsterSpeciesSpiritBeast  MonsterSpecies = "spirit-beast"
	MonsterSpeciesTonberry     MonsterSpecies = "tonberry"
	MonsterSpeciesUnspecified  MonsterSpecies = "unspecified"
	MonsterSpeciesWasp         MonsterSpecies = "wasp"
	MonsterSpeciesWeapon       MonsterSpecies = "weapon"
	MonsterSpeciesWorm         MonsterSpecies = "worm"
	MonsterSpeciesWyrm         MonsterSpecies = "wyrm"
)

func (e *MonsterSpecies) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MonsterSpecies(s)
	case string:
		*e = MonsterSpecies(s)
	default:
		return fmt.Errorf("unsupported scan type for MonsterSpecies: %T", src)
	}
	return nil
}

type NullMonsterSpecies struct {
	MonsterSpecies MonsterSpecies
	Valid          bool // Valid is true if MonsterSpecies is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMonsterSpecies) Scan(value interface{}) error {
	if value == nil {
		ns.MonsterSpecies, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MonsterSpecies.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMonsterSpecies) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MonsterSpecies), nil
}

type MusicUseCase string

const (
	MusicUseCaseBlitzballGame          MusicUseCase = "blitzball-game"
	MusicUseCaseBlitzballMenu          MusicUseCase = "blitzball-menu"
	MusicUseCaseBossBattleDefault      MusicUseCase = "boss-battle-default"
	MusicUseCaseChocobo                MusicUseCase = "chocobo"
	MusicUseCaseGameOver               MusicUseCase = "game-over"
	MusicUseCaseMainMenu               MusicUseCase = "main-menu"
	MusicUseCaseRandomEncounterDefault MusicUseCase = "random-encounter-default"
	MusicUseCaseVictory                MusicUseCase = "victory"
)

func (e *MusicUseCase) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MusicUseCase(s)
	case string:
		*e = MusicUseCase(s)
	default:
		return fmt.Errorf("unsupported scan type for MusicUseCase: %T", src)
	}
	return nil
}

type NullMusicUseCase struct {
	MusicUseCase MusicUseCase
	Valid        bool // Valid is true if MusicUseCase is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMusicUseCase) Scan(value interface{}) error {
	if value == nil {
		ns.MusicUseCase, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MusicUseCase.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMusicUseCase) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MusicUseCase), nil
}

type NullifyArmored string

const (
	NullifyArmoredTarget NullifyArmored = "target"
	NullifyArmoredBearer NullifyArmored = "bearer"
)

func (e *NullifyArmored) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NullifyArmored(s)
	case string:
		*e = NullifyArmored(s)
	default:
		return fmt.Errorf("unsupported scan type for NullifyArmored: %T", src)
	}
	return nil
}

type NullNullifyArmored struct {
	NullifyArmored NullifyArmored
	Valid          bool // Valid is true if NullifyArmored is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNullifyArmored) Scan(value interface{}) error {
	if value == nil {
		ns.NullifyArmored, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NullifyArmored.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNullifyArmored) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NullifyArmored), nil
}

type OverdriveType string

const (
	OverdriveTypeFormula   OverdriveType = "formula"
	OverdriveTypePerAction OverdriveType = "per-action"
)

func (e *OverdriveType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OverdriveType(s)
	case string:
		*e = OverdriveType(s)
	default:
		return fmt.Errorf("unsupported scan type for OverdriveType: %T", src)
	}
	return nil
}

type NullOverdriveType struct {
	OverdriveType OverdriveType
	Valid         bool // Valid is true if OverdriveType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOverdriveType) Scan(value interface{}) error {
	if value == nil {
		ns.OverdriveType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OverdriveType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOverdriveType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OverdriveType), nil
}

type Parameter string

const (
	ParameterAccuracyPercentage     Parameter = "accuracy-percentage"
	ParameterAmbushChance           Parameter = "ambush-chance"
	ParameterApGain                 Parameter = "ap-gain"
	ParameterBuffFactorMagBased     Parameter = "buff-factor-mag-based"
	ParameterBuffFactorStrBased     Parameter = "buff-factor-str-based"
	ParameterCommonStealRate        Parameter = "common-steal-rate"
	ParameterCriticalHitDefense     Parameter = "critical-hit-defense"
	ParameterCriticalHitRate        Parameter = "critical-hit-rate"
	ParameterCurrentHp              Parameter = "current-hp"
	ParameterDamageLimit            Parameter = "damage-limit"
	ParameterEncounterRate          Parameter = "encounter-rate"
	ParameterFinalEvasionRate       Parameter = "final-evasion-rate"
	ParameterFinalHitRate           Parameter = "final-hit-rate"
	ParameterGilGain                Parameter = "gil-gain"
	ParameterHpLimit                Parameter = "hp-limit"
	ParameterInitialCounterValue    Parameter = "initial-counter-value"
	ParameterItemsHealing           Parameter = "items-healing"
	ParameterMagicalDamageDealt     Parameter = "magical-damage-dealt"
	ParameterMagicalDamageTaken     Parameter = "magical-damage-taken"
	ParameterMpLimit                Parameter = "mp-limit"
	ParameterOverdriveCharge        Parameter = "overdrive-charge"
	ParameterOverdriveGauge         Parameter = "overdrive-gauge"
	ParameterPercentageDamageTaken  Parameter = "percentage-damage-taken"
	ParameterPhysicalDamageDealt    Parameter = "physical-damage-dealt"
	ParameterPhysicalDamageTaken    Parameter = "physical-damage-taken"
	ParameterMpCost                 Parameter = "mp-cost"
	ParameterPreemptiveStrikeChance Parameter = "preemptive-strike-chance"
	ParameterRareStealRate          Parameter = "rare-steal-rate"
	ParameterSpecialDamageDealt     Parameter = "special-damage-dealt"
	ParameterSpecialDamageTaken     Parameter = "special-damage-taken"
	ParameterTickSpeed              Parameter = "tick-speed"
)

func (e *Parameter) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Parameter(s)
	case string:
		*e = Parameter(s)
	default:
		return fmt.Errorf("unsupported scan type for Parameter: %T", src)
	}
	return nil
}

type NullParameter struct {
	Parameter Parameter
	Valid     bool // Valid is true if Parameter is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullParameter) Scan(value interface{}) error {
	if value == nil {
		ns.Parameter, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Parameter.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullParameter) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Parameter), nil
}

type QuestType string

const (
	QuestTypeSidequest QuestType = "sidequest"
	QuestTypeSubquest  QuestType = "subquest"
)

func (e *QuestType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuestType(s)
	case string:
		*e = QuestType(s)
	default:
		return fmt.Errorf("unsupported scan type for QuestType: %T", src)
	}
	return nil
}

type NullQuestType struct {
	QuestType QuestType
	Valid     bool // Valid is true if QuestType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuestType) Scan(value interface{}) error {
	if value == nil {
		ns.QuestType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuestType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuestType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuestType), nil
}

type RecoveryType string

const (
	RecoveryTypeHp RecoveryType = "hp"
	RecoveryTypeMp RecoveryType = "mp"
)

func (e *RecoveryType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RecoveryType(s)
	case string:
		*e = RecoveryType(s)
	default:
		return fmt.Errorf("unsupported scan type for RecoveryType: %T", src)
	}
	return nil
}

type NullRecoveryType struct {
	RecoveryType RecoveryType
	Valid        bool // Valid is true if RecoveryType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRecoveryType) Scan(value interface{}) error {
	if value == nil {
		ns.RecoveryType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RecoveryType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRecoveryType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RecoveryType), nil
}

type ShopCategory string

const (
	ShopCategoryStandard     ShopCategory = "standard"
	ShopCategoryOaka         ShopCategory = "oaka"
	ShopCategoryTravelAgency ShopCategory = "travel-agency"
	ShopCategoryWantz        ShopCategory = "wantz"
)

func (e *ShopCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ShopCategory(s)
	case string:
		*e = ShopCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for ShopCategory: %T", src)
	}
	return nil
}

type NullShopCategory struct {
	ShopCategory ShopCategory
	Valid        bool // Valid is true if ShopCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullShopCategory) Scan(value interface{}) error {
	if value == nil {
		ns.ShopCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ShopCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullShopCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ShopCategory), nil
}

type SubmenuType string

const (
	SubmenuTypeBlkMagic   SubmenuType = "blk-magic"
	SubmenuTypeSkill      SubmenuType = "skill"
	SubmenuTypeSpecial    SubmenuType = "special"
	SubmenuTypeSummon     SubmenuType = "summon"
	SubmenuTypeWhtMagic   SubmenuType = "wht-magic"
	SubmenuTypeItem       SubmenuType = "item"
	SubmenuTypeWeapon     SubmenuType = "weapon"
	SubmenuTypeArmor      SubmenuType = "armor"
	SubmenuTypeCharacters SubmenuType = "characters"
	SubmenuTypeUse        SubmenuType = "use"
	SubmenuTypeOverdrive  SubmenuType = "overdrive"
)

func (e *SubmenuType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubmenuType(s)
	case string:
		*e = SubmenuType(s)
	default:
		return fmt.Errorf("unsupported scan type for SubmenuType: %T", src)
	}
	return nil
}

type NullSubmenuType struct {
	SubmenuType SubmenuType
	Valid       bool // Valid is true if SubmenuType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubmenuType) Scan(value interface{}) error {
	if value == nil {
		ns.SubmenuType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubmenuType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubmenuType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubmenuType), nil
}

type TargetType string

const (
	TargetTypeSelf            TargetType = "self"
	TargetTypeSingleCharacter TargetType = "single-character"
	TargetTypeSingleEnemy     TargetType = "single-enemy"
	TargetTypeSingleTarget    TargetType = "single-target"
	TargetTypeRandomEnemy     TargetType = "random-enemy"
	TargetTypeAllCharacters   TargetType = "all-characters"
	TargetTypeAllEnemies      TargetType = "all-enemies"
	TargetTypeTargetParty     TargetType = "target-party"
	TargetTypeEveryone        TargetType = "everyone"
)

func (e *TargetType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TargetType(s)
	case string:
		*e = TargetType(s)
	default:
		return fmt.Errorf("unsupported scan type for TargetType: %T", src)
	}
	return nil
}

type NullTargetType struct {
	TargetType TargetType
	Valid      bool // Valid is true if TargetType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTargetType) Scan(value interface{}) error {
	if value == nil {
		ns.TargetType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TargetType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTargetType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TargetType), nil
}

type TreasureType string

const (
	TreasureTypeChest  TreasureType = "chest"
	TreasureTypeGift   TreasureType = "gift"
	TreasureTypeObject TreasureType = "object"
)

func (e *TreasureType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TreasureType(s)
	case string:
		*e = TreasureType(s)
	default:
		return fmt.Errorf("unsupported scan type for TreasureType: %T", src)
	}
	return nil
}

type NullTreasureType struct {
	TreasureType TreasureType
	Valid        bool // Valid is true if TreasureType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTreasureType) Scan(value interface{}) error {
	if value == nil {
		ns.TreasureType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TreasureType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTreasureType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TreasureType), nil
}

type WeaponType string

const (
	WeaponTypeSword        WeaponType = "sword"
	WeaponTypeStaff        WeaponType = "staff"
	WeaponTypeBlitzball    WeaponType = "blitzball"
	WeaponTypeDoll         WeaponType = "doll"
	WeaponTypeSpear        WeaponType = "spear"
	WeaponTypeBlade        WeaponType = "blade"
	WeaponTypeClaw         WeaponType = "claw"
	WeaponTypeSeymourStaff WeaponType = "seymour-staff"
)

func (e *WeaponType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WeaponType(s)
	case string:
		*e = WeaponType(s)
	default:
		return fmt.Errorf("unsupported scan type for WeaponType: %T", src)
	}
	return nil
}

type NullWeaponType struct {
	WeaponType WeaponType
	Valid      bool // Valid is true if WeaponType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWeaponType) Scan(value interface{}) error {
	if value == nil {
		ns.WeaponType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WeaponType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWeaponType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WeaponType), nil
}

type Ability struct {
	ID            int32
	DataHash      string
	Name          string
	Version       sql.NullInt32
	Specification sql.NullString
	AttributesID  sql.NullInt32
	Type          AbilityType
}

type AbilityAttribute struct {
	ID               int32
	DataHash         string
	Rank             sql.NullInt32
	AppearsInHelpBar bool
	CanCopycat       bool
}

type Aeon struct {
	ID                    int32
	DataHash              string
	Name                  string
	UnlockCondition       string
	Category              NullAeonCategory
	IsOptional            bool
	BattlesToRegenerate   int32
	PhysAtkDamageConstant sql.NullInt32
	PhysAtkRange          interface{}
	PhysAtkShatterRate    interface{}
	PhysAtkAccSource      NullAccuracySource
	PhysAtkHitChance      interface{}
	PhysAtkAccModifier    sql.NullFloat64
}

type AeonCommand struct {
	ID          int32
	DataHash    string
	Name        string
	Description string
	Effect      string
	Cursor      NullTargetType
}

type Affinity struct {
	ID           int32
	DataHash     string
	Name         string
	DamageFactor sql.NullFloat64
}

type AgilitySubtier struct {
	ID                int32
	DataHash          string
	AgilityTierID     int32
	SubtierMinAgility interface{}
	SubtierMaxAgility interface{}
	CharacterMinIcv   sql.NullInt32
}

type AgilityTier struct {
	ID              int32
	DataHash        string
	MinAgility      interface{}
	MaxAgility      interface{}
	TickSpeed       int32
	MonsterMinIcv   sql.NullInt32
	MonsterMaxIcv   sql.NullInt32
	CharacterMaxIcv sql.NullInt32
}

type Area struct {
	ID                   int32
	DataHash             string
	SubLocationID        int32
	Name                 string
	Version              sql.NullInt32
	Specification        sql.NullString
	StoryOnly            bool
	HasSaveSphere        bool
	AirshipDropOff       bool
	HasCompilationSphere bool
	CanRideChocobo       bool
}

type AutoAbility struct {
	ID                  int32
	DataHash            string
	Name                string
	Description         sql.NullString
	Effect              string
	Type                NullEquipType
	Category            AutoAbilityCategory
	AbilityValue        sql.NullInt32
	ActivationCondition NullAaActivationCondition
	Counter             NullCounterType
	GradualRecovery     NullRecoveryType
	OnHitElement        NullElementType
	ConversionFrom      NullParameter
	ConversionTo        NullParameter
}

type BlitzballItemsList struct {
	ID       int32
	DataHash string
	Category BlitzballTournamentCategory
	Slot     BlitzballItemSlot
}

type CelestialWeapon struct {
	ID          int32
	DataHash    string
	Name        string
	KeyItemBase KeyItemBase
	Formula     CelestialFormula
}

type Character struct {
	ID                  int32
	DataHash            string
	Name                string
	WeaponType          WeaponType
	ArmorType           ArmorType
	PhysicalAttackRange interface{}
	CanFightUnderwater  bool
}

type DefaultAbility struct {
	ID       int32
	DataHash string
	Name     string
}

type Element struct {
	ID       int32
	DataHash string
	Name     string
}

type EnemyAbility struct {
	ID        int32
	DataHash  string
	AbilityID int32
	Effect    sql.NullString
}

type EquipmentAbility struct {
	ID                  int32
	DataHash            string
	Type                EquipType
	Classification      EquipClass
	SpecificCharacterID sql.NullInt32
	Version             sql.NullInt32
	Priority            sql.NullInt32
	Pool1Amt            sql.NullInt32
	Pool2Amt            sql.NullInt32
	EmptySlotsAmt       int32
}

type Fmv struct {
	ID                  int32
	DataHash            string
	Name                string
	Translation         sql.NullString
	CutsceneDescription string
	SongID              sql.NullInt32
	AreaID              int32
}

type Item struct {
	ID                    int32
	DataHash              string
	MasterItemID          int32
	Description           string
	Effect                string
	SphereGridDescription sql.NullString
	Category              ItemCategory
	Usability             NullItemUsability
	BasePrice             sql.NullInt32
	SellValue             int32
}

type ItemAbility struct {
	ID        int32
	DataHash  string
	ItemID    int32
	AbilityID int32
	Cursor    TargetType
}

type KeyItem struct {
	ID           int32
	DataHash     string
	MasterItemID int32
	Category     KeyItemCategory
	Description  string
	Effect       string
}

type Location struct {
	ID       int32
	DataHash string
	Name     string
}

type MasterItem struct {
	ID       int32
	DataHash string
	Name     string
	Type     ItemType
}

type MenuCommand struct {
	ID          int32
	DataHash    string
	Name        string
	Description string
	Effect      string
}

type Mix struct {
	ID          int32
	DataHash    string
	OverdriveID int32
	Category    MixCategory
}

type MixCombination struct {
	ID           int32
	DataHash     string
	FirstItemID  int32
	SecondItemID int32
}

type MixComboJunction struct {
	ID          int32
	DataHash    string
	MixID       int32
	ComboID     int32
	IsBestCombo bool
}

type Monster struct {
	ID                   int32
	DataHash             string
	Name                 string
	Version              sql.NullInt32
	Specification        sql.NullString
	Notes                sql.NullString
	Species              MonsterSpecies
	IsStoryBased         bool
	CanBeCaptured        bool
	AreaConquestLocation NullMaCreationArea
	CtbIconType          CtbIconType
	HasOverdrive         bool
	IsUnderwater         bool
	IsZombie             bool
	Distance             interface{}
	Ap                   int32
	ApOverkill           int32
	OverkillDamage       int32
	Gil                  int32
	StealGil             sql.NullInt32
	DoomCountdown        interface{}
	PoisonRate           interface{}
	ThreatenChance       interface{}
	ZanmatoLevel         int32
	MonsterArenaPrice    sql.NullInt32
	SensorText           string
	ScanText             sql.NullString
}

type MonsterArenaCreation struct {
	ID                        int32
	DataHash                  string
	Name                      string
	Category                  MaCreationCategory
	RequiredArea              NullMaCreationArea
	RequiredSpecies           NullMaCreationSpecies
	UnderwaterOnly            bool
	CreationsUnlockedCategory NullCreationsUnlockedCategory
	Amount                    int32
}

type MonsterFormationList struct {
	ID       int32
	DataHash string
	Version  sql.NullInt32
	AreaID   int32
	Notes    sql.NullString
}

type Overdrife struct {
	ID              int32
	DataHash        string
	OdCommandID     sql.NullInt32
	Name            string
	Version         sql.NullInt32
	Description     string
	Effect          string
	AttributesID    int32
	UnlockCondition sql.NullString
	CountdownInSec  sql.NullInt32
	Cursor          NullTargetType
}

type OverdriveAbility struct {
	ID        int32
	DataHash  string
	AbilityID int32
}

type OverdriveCommand struct {
	ID          int32
	DataHash    string
	Name        string
	Description string
	Rank        int32
	OpenMenu    NullSubmenuType
}

type OverdriveMode struct {
	ID          int32
	DataHash    string
	Name        string
	Description string
	Effect      string
	Type        OverdriveType
	FillRate    interface{}
}

type PlayerAbility struct {
	ID                  int32
	DataHash            string
	AbilityID           int32
	Description         sql.NullString
	Effect              string
	Submenu             NullSubmenuType
	CanUseOutsideBattle bool
	MpCost              sql.NullInt32
	Cursor              NullTargetType
	OpenMenu            NullSubmenuType
}

type Primer struct {
	ID            int32
	DataHash      string
	KeyItemID     int32
	AlBhedLetter  string
	EnglishLetter string
}

type Property struct {
	ID             int32
	DataHash       string
	Name           string
	Effect         string
	NullifyArmored NullNullifyArmored
}

type Quest struct {
	ID       int32
	DataHash string
	Name     string
	Type     QuestType
}

type Shop struct {
	ID       int32
	DataHash string
	Version  sql.NullInt32
	AreaID   int32
	Notes    sql.NullString
	Category ShopCategory
}

type Sidequest struct {
	ID       int32
	DataHash string
	QuestID  int32
}

type Song struct {
	ID                   int32
	DataHash             string
	Name                 string
	StreamingName        sql.NullString
	InGameName           sql.NullString
	OstName              sql.NullString
	Translation          sql.NullString
	StreamingTrackNumber sql.NullInt32
	MusicSphereID        sql.NullInt32
	OstDisc              interface{}
	OstTrackNumber       sql.NullInt32
	DurationInSeconds    int32
	CanLoop              bool
	SpecialUseCase       NullMusicUseCase
	CreditsID            sql.NullInt32
}

type SongCredit struct {
	ID        int32
	DataHash  string
	Composer  sql.NullString
	Arranger  sql.NullString
	Performer sql.NullString
	Lyricist  sql.NullString
}

type Stat struct {
	ID       int32
	DataHash string
	Name     string
	Effect   string
	MinVal   int32
	MaxVal   int32
	MaxVal2  sql.NullInt32
	SphereID sql.NullInt32
}

type StatusCondition struct {
	ID             int32
	DataHash       string
	Name           string
	Effect         string
	NullifyArmored NullNullifyArmored
}

type SubLocation struct {
	ID            int32
	DataHash      string
	LocationID    int32
	Name          string
	Specification sql.NullString
}

type Subquest struct {
	ID                int32
	DataHash          string
	QuestID           int32
	ParentSidequestID int32
}

type Treasure struct {
	ID              int32
	DataHash        string
	AreaID          int32
	Version         int32
	TreasureType    TreasureType
	LootType        LootType
	IsPostAirship   bool
	IsAnimaTreasure bool
	Notes           sql.NullString
	GilAmount       sql.NullInt32
}

type TriggerCommand struct {
	ID          int32
	DataHash    string
	AbilityID   int32
	Description string
	Effect      string
	Cursor      TargetType
}
