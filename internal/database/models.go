// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type AaActivationCondition string

const (
	AaActivationConditionAlways        AaActivationCondition = "always"
	AaActivationConditionActiveParty   AaActivationCondition = "active-party"
	AaActivationConditionHpCritical    AaActivationCondition = "hp-critical"
	AaActivationConditionOutsideBattle AaActivationCondition = "outside-battle"
)

func (e *AaActivationCondition) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AaActivationCondition(s)
	case string:
		*e = AaActivationCondition(s)
	default:
		return fmt.Errorf("unsupported scan type for AaActivationCondition: %T", src)
	}
	return nil
}

type NullAaActivationCondition struct {
	AaActivationCondition AaActivationCondition
	Valid                 bool // Valid is true if AaActivationCondition is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAaActivationCondition) Scan(value interface{}) error {
	if value == nil {
		ns.AaActivationCondition, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AaActivationCondition.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAaActivationCondition) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AaActivationCondition), nil
}

type AccuracySource string

const (
	AccuracySourceAccuracy AccuracySource = "accuracy"
	AccuracySourceRate     AccuracySource = "rate"
)

func (e *AccuracySource) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccuracySource(s)
	case string:
		*e = AccuracySource(s)
	default:
		return fmt.Errorf("unsupported scan type for AccuracySource: %T", src)
	}
	return nil
}

type NullAccuracySource struct {
	AccuracySource AccuracySource
	Valid          bool // Valid is true if AccuracySource is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccuracySource) Scan(value interface{}) error {
	if value == nil {
		ns.AccuracySource, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccuracySource.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccuracySource) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccuracySource), nil
}

type AeonCategory string

const (
	AeonCategoryStandardAeons AeonCategory = "standard-aeons"
	AeonCategoryMagusSisters  AeonCategory = "magus-sisters"
)

func (e *AeonCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AeonCategory(s)
	case string:
		*e = AeonCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for AeonCategory: %T", src)
	}
	return nil
}

type NullAeonCategory struct {
	AeonCategory AeonCategory
	Valid        bool // Valid is true if AeonCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAeonCategory) Scan(value interface{}) error {
	if value == nil {
		ns.AeonCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AeonCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAeonCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AeonCategory), nil
}

type ArmorType string

const (
	ArmorTypeShield       ArmorType = "shield"
	ArmorTypeRing         ArmorType = "ring"
	ArmorTypeArmguard     ArmorType = "armguard"
	ArmorTypeBangle       ArmorType = "bangle"
	ArmorTypeArmlet       ArmorType = "armlet"
	ArmorTypeBracer       ArmorType = "bracer"
	ArmorTypeTarge        ArmorType = "targe"
	ArmorTypeSeymourArmor ArmorType = "seymour-armor"
)

func (e *ArmorType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ArmorType(s)
	case string:
		*e = ArmorType(s)
	default:
		return fmt.Errorf("unsupported scan type for ArmorType: %T", src)
	}
	return nil
}

type NullArmorType struct {
	ArmorType ArmorType
	Valid     bool // Valid is true if ArmorType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullArmorType) Scan(value interface{}) error {
	if value == nil {
		ns.ArmorType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ArmorType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullArmorType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ArmorType), nil
}

type AutoAbilityCategory string

const (
	AutoAbilityCategoryApOverdrive         AutoAbilityCategory = "ap-overdrive"
	AutoAbilityCategoryAutoCure            AutoAbilityCategory = "auto-cure"
	AutoAbilityCategoryAutoStatus          AutoAbilityCategory = "auto-status"
	AutoAbilityCategoryBreakLimit          AutoAbilityCategory = "break-limit"
	AutoAbilityCategoryCounter             AutoAbilityCategory = "counter"
	AutoAbilityCategoryElementalProtection AutoAbilityCategory = "elemental-protection"
	AutoAbilityCategoryElementalStrike     AutoAbilityCategory = "elemental-strike"
	AutoAbilityCategoryOther               AutoAbilityCategory = "other"
	AutoAbilityCategorySosStatus           AutoAbilityCategory = "sos-status"
	AutoAbilityCategoryStatX               AutoAbilityCategory = "stat-+x%"
	AutoAbilityCategoryStatusInfliction    AutoAbilityCategory = "status-infliction"
	AutoAbilityCategoryStatusProtection    AutoAbilityCategory = "status-protection"
)

func (e *AutoAbilityCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AutoAbilityCategory(s)
	case string:
		*e = AutoAbilityCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for AutoAbilityCategory: %T", src)
	}
	return nil
}

type NullAutoAbilityCategory struct {
	AutoAbilityCategory AutoAbilityCategory
	Valid               bool // Valid is true if AutoAbilityCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAutoAbilityCategory) Scan(value interface{}) error {
	if value == nil {
		ns.AutoAbilityCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AutoAbilityCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAutoAbilityCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AutoAbilityCategory), nil
}

type BlitzballItemSlot string

const (
	BlitzballItemSlot1st       BlitzballItemSlot = "1st"
	BlitzballItemSlot2nd       BlitzballItemSlot = "2nd"
	BlitzballItemSlot3rd       BlitzballItemSlot = "3rd"
	BlitzballItemSlotTopScorer BlitzballItemSlot = "top-scorer"
)

func (e *BlitzballItemSlot) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BlitzballItemSlot(s)
	case string:
		*e = BlitzballItemSlot(s)
	default:
		return fmt.Errorf("unsupported scan type for BlitzballItemSlot: %T", src)
	}
	return nil
}

type NullBlitzballItemSlot struct {
	BlitzballItemSlot BlitzballItemSlot
	Valid             bool // Valid is true if BlitzballItemSlot is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBlitzballItemSlot) Scan(value interface{}) error {
	if value == nil {
		ns.BlitzballItemSlot, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BlitzballItemSlot.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBlitzballItemSlot) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BlitzballItemSlot), nil
}

type BlitzballTournamentCategory string

const (
	BlitzballTournamentCategoryLeague     BlitzballTournamentCategory = "league"
	BlitzballTournamentCategoryTournament BlitzballTournamentCategory = "tournament"
)

func (e *BlitzballTournamentCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BlitzballTournamentCategory(s)
	case string:
		*e = BlitzballTournamentCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for BlitzballTournamentCategory: %T", src)
	}
	return nil
}

type NullBlitzballTournamentCategory struct {
	BlitzballTournamentCategory BlitzballTournamentCategory
	Valid                       bool // Valid is true if BlitzballTournamentCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBlitzballTournamentCategory) Scan(value interface{}) error {
	if value == nil {
		ns.BlitzballTournamentCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BlitzballTournamentCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBlitzballTournamentCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BlitzballTournamentCategory), nil
}

type CelestialFormula string

const (
	CelestialFormulaHpHigh CelestialFormula = "hp-high"
	CelestialFormulaHpLow  CelestialFormula = "hp-low"
	CelestialFormulaMpHigh CelestialFormula = "mp-high"
)

func (e *CelestialFormula) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CelestialFormula(s)
	case string:
		*e = CelestialFormula(s)
	default:
		return fmt.Errorf("unsupported scan type for CelestialFormula: %T", src)
	}
	return nil
}

type NullCelestialFormula struct {
	CelestialFormula CelestialFormula
	Valid            bool // Valid is true if CelestialFormula is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCelestialFormula) Scan(value interface{}) error {
	if value == nil {
		ns.CelestialFormula, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CelestialFormula.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCelestialFormula) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CelestialFormula), nil
}

type CounterType string

const (
	CounterTypePhysical CounterType = "physical"
	CounterTypeMagical  CounterType = "magical"
)

func (e *CounterType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CounterType(s)
	case string:
		*e = CounterType(s)
	default:
		return fmt.Errorf("unsupported scan type for CounterType: %T", src)
	}
	return nil
}

type NullCounterType struct {
	CounterType CounterType
	Valid       bool // Valid is true if CounterType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCounterType) Scan(value interface{}) error {
	if value == nil {
		ns.CounterType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CounterType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCounterType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CounterType), nil
}

type CreationsUnlockedCategory string

const (
	CreationsUnlockedCategoryArea    CreationsUnlockedCategory = "area"
	CreationsUnlockedCategorySpecies CreationsUnlockedCategory = "species"
)

func (e *CreationsUnlockedCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CreationsUnlockedCategory(s)
	case string:
		*e = CreationsUnlockedCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for CreationsUnlockedCategory: %T", src)
	}
	return nil
}

type NullCreationsUnlockedCategory struct {
	CreationsUnlockedCategory CreationsUnlockedCategory
	Valid                     bool // Valid is true if CreationsUnlockedCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCreationsUnlockedCategory) Scan(value interface{}) error {
	if value == nil {
		ns.CreationsUnlockedCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CreationsUnlockedCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCreationsUnlockedCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CreationsUnlockedCategory), nil
}

type ElementType string

const (
	ElementTypeFire      ElementType = "fire"
	ElementTypeLightning ElementType = "lightning"
	ElementTypeWater     ElementType = "water"
	ElementTypeIce       ElementType = "ice"
	ElementTypeHoly      ElementType = "holy"
)

func (e *ElementType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ElementType(s)
	case string:
		*e = ElementType(s)
	default:
		return fmt.Errorf("unsupported scan type for ElementType: %T", src)
	}
	return nil
}

type NullElementType struct {
	ElementType ElementType
	Valid       bool // Valid is true if ElementType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullElementType) Scan(value interface{}) error {
	if value == nil {
		ns.ElementType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ElementType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullElementType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ElementType), nil
}

type EquipType string

const (
	EquipTypeWeapon EquipType = "weapon"
	EquipTypeArmor  EquipType = "armor"
)

func (e *EquipType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EquipType(s)
	case string:
		*e = EquipType(s)
	default:
		return fmt.Errorf("unsupported scan type for EquipType: %T", src)
	}
	return nil
}

type NullEquipType struct {
	EquipType EquipType
	Valid     bool // Valid is true if EquipType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEquipType) Scan(value interface{}) error {
	if value == nil {
		ns.EquipType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EquipType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEquipType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EquipType), nil
}

type KeyItemBase string

const (
	KeyItemBaseSun     KeyItemBase = "sun"
	KeyItemBaseMoon    KeyItemBase = "moon"
	KeyItemBaseJupiter KeyItemBase = "jupiter"
	KeyItemBaseVenus   KeyItemBase = "venus"
	KeyItemBaseSaturn  KeyItemBase = "saturn"
	KeyItemBaseMars    KeyItemBase = "mars"
	KeyItemBaseMercury KeyItemBase = "mercury"
)

func (e *KeyItemBase) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = KeyItemBase(s)
	case string:
		*e = KeyItemBase(s)
	default:
		return fmt.Errorf("unsupported scan type for KeyItemBase: %T", src)
	}
	return nil
}

type NullKeyItemBase struct {
	KeyItemBase KeyItemBase
	Valid       bool // Valid is true if KeyItemBase is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullKeyItemBase) Scan(value interface{}) error {
	if value == nil {
		ns.KeyItemBase, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.KeyItemBase.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullKeyItemBase) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.KeyItemBase), nil
}

type LootType string

const (
	LootTypeItem      LootType = "item"
	LootTypeEquipment LootType = "equipment"
	LootTypeGil       LootType = "gil"
)

func (e *LootType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LootType(s)
	case string:
		*e = LootType(s)
	default:
		return fmt.Errorf("unsupported scan type for LootType: %T", src)
	}
	return nil
}

type NullLootType struct {
	LootType LootType
	Valid    bool // Valid is true if LootType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLootType) Scan(value interface{}) error {
	if value == nil {
		ns.LootType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LootType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLootType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LootType), nil
}

type MaCreationCategory string

const (
	MaCreationCategoryArea     MaCreationCategory = "area"
	MaCreationCategorySpecies  MaCreationCategory = "species"
	MaCreationCategoryOriginal MaCreationCategory = "original"
)

func (e *MaCreationCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MaCreationCategory(s)
	case string:
		*e = MaCreationCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for MaCreationCategory: %T", src)
	}
	return nil
}

type NullMaCreationCategory struct {
	MaCreationCategory MaCreationCategory
	Valid              bool // Valid is true if MaCreationCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMaCreationCategory) Scan(value interface{}) error {
	if value == nil {
		ns.MaCreationCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MaCreationCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMaCreationCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MaCreationCategory), nil
}

type NullifyArmored string

const (
	NullifyArmoredTarget NullifyArmored = "target"
	NullifyArmoredBearer NullifyArmored = "bearer"
)

func (e *NullifyArmored) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NullifyArmored(s)
	case string:
		*e = NullifyArmored(s)
	default:
		return fmt.Errorf("unsupported scan type for NullifyArmored: %T", src)
	}
	return nil
}

type NullNullifyArmored struct {
	NullifyArmored NullifyArmored
	Valid          bool // Valid is true if NullifyArmored is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNullifyArmored) Scan(value interface{}) error {
	if value == nil {
		ns.NullifyArmored, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NullifyArmored.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNullifyArmored) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NullifyArmored), nil
}

type OverdriveType string

const (
	OverdriveTypeFormula   OverdriveType = "formula"
	OverdriveTypePerAction OverdriveType = "per-action"
)

func (e *OverdriveType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OverdriveType(s)
	case string:
		*e = OverdriveType(s)
	default:
		return fmt.Errorf("unsupported scan type for OverdriveType: %T", src)
	}
	return nil
}

type NullOverdriveType struct {
	OverdriveType OverdriveType
	Valid         bool // Valid is true if OverdriveType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOverdriveType) Scan(value interface{}) error {
	if value == nil {
		ns.OverdriveType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OverdriveType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOverdriveType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OverdriveType), nil
}

type Parameter string

const (
	ParameterAccuracyPercentage     Parameter = "accuracy-percentage"
	ParameterAmbushChance           Parameter = "ambush-chance"
	ParameterApGain                 Parameter = "ap-gain"
	ParameterBuffFactorMagBased     Parameter = "buff-factor-mag-based"
	ParameterBuffFactorStrBased     Parameter = "buff-factor-str-based"
	ParameterCommonStealRate        Parameter = "common-steal-rate"
	ParameterCriticalHitDefense     Parameter = "critical-hit-defense"
	ParameterCriticalHitRate        Parameter = "critical-hit-rate"
	ParameterCurrentHp              Parameter = "current-hp"
	ParameterDamageLimit            Parameter = "damage-limit"
	ParameterEncounterRate          Parameter = "encounter-rate"
	ParameterFinalEvasionRate       Parameter = "final-evasion-rate"
	ParameterFinalHitRate           Parameter = "final-hit-rate"
	ParameterGilGain                Parameter = "gil-gain"
	ParameterHpLimit                Parameter = "hp-limit"
	ParameterInitialCounterValue    Parameter = "initial-counter-value"
	ParameterItemsHealing           Parameter = "items-healing"
	ParameterMagicalDamageDealt     Parameter = "magical-damage-dealt"
	ParameterMagicalDamageTaken     Parameter = "magical-damage-taken"
	ParameterMpLimit                Parameter = "mp-limit"
	ParameterOverdriveCharge        Parameter = "overdrive-charge"
	ParameterPercentageDamageTaken  Parameter = "percentage-damage-taken"
	ParameterPhysicalDamageDealt    Parameter = "physical-damage-dealt"
	ParameterPhysicalDamageTaken    Parameter = "physical-damage-taken"
	ParameterMpCost                 Parameter = "mp-cost"
	ParameterPreemptiveStrikeChance Parameter = "preemptive-strike-chance"
	ParameterRareStealRate          Parameter = "rare-steal-rate"
	ParameterSpecialDamageDealt     Parameter = "special-damage-dealt"
	ParameterSpecialDamageTaken     Parameter = "special-damage-taken"
	ParameterTickSpeed              Parameter = "tick-speed"
)

func (e *Parameter) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Parameter(s)
	case string:
		*e = Parameter(s)
	default:
		return fmt.Errorf("unsupported scan type for Parameter: %T", src)
	}
	return nil
}

type NullParameter struct {
	Parameter Parameter
	Valid     bool // Valid is true if Parameter is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullParameter) Scan(value interface{}) error {
	if value == nil {
		ns.Parameter, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Parameter.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullParameter) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Parameter), nil
}

type QuestType string

const (
	QuestTypeSidequest QuestType = "sidequest"
	QuestTypeSubquest  QuestType = "subquest"
)

func (e *QuestType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuestType(s)
	case string:
		*e = QuestType(s)
	default:
		return fmt.Errorf("unsupported scan type for QuestType: %T", src)
	}
	return nil
}

type NullQuestType struct {
	QuestType QuestType
	Valid     bool // Valid is true if QuestType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuestType) Scan(value interface{}) error {
	if value == nil {
		ns.QuestType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuestType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuestType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuestType), nil
}

type RecoveryType string

const (
	RecoveryTypeHp RecoveryType = "hp"
	RecoveryTypeMp RecoveryType = "mp"
)

func (e *RecoveryType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RecoveryType(s)
	case string:
		*e = RecoveryType(s)
	default:
		return fmt.Errorf("unsupported scan type for RecoveryType: %T", src)
	}
	return nil
}

type NullRecoveryType struct {
	RecoveryType RecoveryType
	Valid        bool // Valid is true if RecoveryType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRecoveryType) Scan(value interface{}) error {
	if value == nil {
		ns.RecoveryType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RecoveryType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRecoveryType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RecoveryType), nil
}

type ShopCategory string

const (
	ShopCategoryStandard     ShopCategory = "standard"
	ShopCategoryOaka         ShopCategory = "oaka"
	ShopCategoryTravelAgency ShopCategory = "travel-agency"
	ShopCategoryWantz        ShopCategory = "wantz"
)

func (e *ShopCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ShopCategory(s)
	case string:
		*e = ShopCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for ShopCategory: %T", src)
	}
	return nil
}

type NullShopCategory struct {
	ShopCategory ShopCategory
	Valid        bool // Valid is true if ShopCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullShopCategory) Scan(value interface{}) error {
	if value == nil {
		ns.ShopCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ShopCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullShopCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ShopCategory), nil
}

type TreasureType string

const (
	TreasureTypeChest  TreasureType = "chest"
	TreasureTypeGift   TreasureType = "gift"
	TreasureTypeObject TreasureType = "object"
)

func (e *TreasureType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TreasureType(s)
	case string:
		*e = TreasureType(s)
	default:
		return fmt.Errorf("unsupported scan type for TreasureType: %T", src)
	}
	return nil
}

type NullTreasureType struct {
	TreasureType TreasureType
	Valid        bool // Valid is true if TreasureType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTreasureType) Scan(value interface{}) error {
	if value == nil {
		ns.TreasureType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TreasureType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTreasureType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TreasureType), nil
}

type WeaponType string

const (
	WeaponTypeSword        WeaponType = "sword"
	WeaponTypeStaff        WeaponType = "staff"
	WeaponTypeBlitzball    WeaponType = "blitzball"
	WeaponTypeDoll         WeaponType = "doll"
	WeaponTypeSpear        WeaponType = "spear"
	WeaponTypeBlade        WeaponType = "blade"
	WeaponTypeClaw         WeaponType = "claw"
	WeaponTypeSeymourStaff WeaponType = "seymour-staff"
)

func (e *WeaponType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WeaponType(s)
	case string:
		*e = WeaponType(s)
	default:
		return fmt.Errorf("unsupported scan type for WeaponType: %T", src)
	}
	return nil
}

type NullWeaponType struct {
	WeaponType WeaponType
	Valid      bool // Valid is true if WeaponType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWeaponType) Scan(value interface{}) error {
	if value == nil {
		ns.WeaponType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WeaponType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWeaponType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WeaponType), nil
}

type Aeon struct {
	ID                    int32
	DataHash              string
	Name                  string
	Category              NullAeonCategory
	IsOptional            bool
	BattlesToRegenerate   int32
	PhysAtkDamageConstant sql.NullInt32
	PhysAtkRange          sql.NullInt32
	PhysAtkShatterRate    sql.NullInt32
	PhysAtkAccSource      NullAccuracySource
	PhysAtkHitChance      sql.NullInt32
	PhysAtkAccModifier    sql.NullFloat64
}

type Affinity struct {
	ID           int32
	DataHash     string
	Name         string
	DamageFactor sql.NullFloat64
}

type AgilitySubtier struct {
	ID                int32
	DataHash          string
	AgilityTierID     int32
	SubtierMinAgility int32
	SubtierMaxAgility int32
	CharacterMinIcv   sql.NullInt32
}

type AgilityTier struct {
	ID              int32
	DataHash        string
	MinAgility      int32
	MaxAgility      int32
	TickSpeed       int32
	MonsterMinIcv   sql.NullInt32
	MonsterMaxIcv   sql.NullInt32
	CharacterMaxIcv sql.NullInt32
}

type Area struct {
	ID                   int32
	DataHash             string
	SubLocationID        int32
	Name                 string
	Section              sql.NullString
	CanRevisit           bool
	HasSaveSphere        bool
	AirshipDropOff       bool
	HasCompilationSphere bool
}

type AutoAbility struct {
	ID                  int32
	DataHash            string
	Name                string
	Description         sql.NullString
	Effect              string
	Type                EquipType
	Category            AutoAbilityCategory
	AbilityValue        sql.NullInt32
	ActivationCondition AaActivationCondition
	Counter             NullCounterType
	GradualRecovery     NullRecoveryType
	OnHitElement        NullElementType
	ConversionFrom      NullParameter
	ConversionTo        NullParameter
}

type BlitzballItemsList struct {
	ID       int32
	DataHash string
	Category BlitzballTournamentCategory
	Slot     BlitzballItemSlot
}

type CelestialWeapon struct {
	ID          int32
	DataHash    string
	Name        string
	KeyItemBase KeyItemBase
	Formula     CelestialFormula
}

type Character struct {
	ID                  int32
	DataHash            string
	Name                string
	WeaponType          WeaponType
	ArmorType           ArmorType
	PhysicalAttackRange int32
	CanFightUnderwater  bool
}

type DefaultAbility struct {
	ID       int32
	DataHash string
	Name     string
}

type Element struct {
	ID       int32
	DataHash string
	Name     string
}

type Location struct {
	ID       int32
	DataHash string
	Name     string
}

type MonsterArenaCreation struct {
	ID                        int32
	DataHash                  string
	Name                      string
	Category                  MaCreationCategory
	RequiredArea              sql.NullString
	RequiredSpecies           sql.NullString
	UnderwaterOnly            bool
	CreationsUnlockedCategory NullCreationsUnlockedCategory
	Amount                    int32
}

type OverdriveMode struct {
	ID          int32
	DataHash    string
	Name        string
	Description string
	Effect      string
	Type        OverdriveType
	FillRate    sql.NullFloat64
}

type Property struct {
	ID             int32
	DataHash       string
	Name           string
	Effect         string
	NullifyArmored NullNullifyArmored
}

type Quest struct {
	ID       int32
	DataHash string
	Name     string
	Type     QuestType
}

type Shop struct {
	ID       int32
	DataHash string
	Version  sql.NullInt32
	Notes    sql.NullString
	Category ShopCategory
}

type Sidequest struct {
	ID       int32
	DataHash string
	QuestID  int32
}

type Stat struct {
	ID       int32
	DataHash string
	Name     string
	Effect   string
	MinVal   int32
	MaxVal   int32
	MaxVal2  sql.NullInt32
}

type StatusCondition struct {
	ID             int32
	DataHash       string
	Name           string
	Effect         string
	NullifyArmored NullNullifyArmored
}

type SubLocation struct {
	ID            int32
	DataHash      string
	LocationID    int32
	Name          string
	Specification sql.NullString
}

type Subquest struct {
	ID                int32
	DataHash          string
	QuestID           int32
	ParentSidequestID int32
}

type Treasure struct {
	ID              int32
	DataHash        string
	TreasureListID  int32
	Version         int32
	TreasureType    TreasureType
	LootType        LootType
	IsPostAirship   bool
	IsAnimaTreasure bool
	Notes           sql.NullString
	GilAmount       sql.NullInt32
}

type TreasureList struct {
	ID int32
}
